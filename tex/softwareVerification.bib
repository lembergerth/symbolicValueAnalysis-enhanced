Automatically generated by Mendeley Desktop 1.13.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Clarke2003,
abstract = {The state explosion problem remains a major hurdle in applying symbolic model checking to large hardware designs. State space abstraction, having been essential for verifying designs of industrial complexity, is typically a manual process, requiring considerable creativity and insight.In this article, we present an automatic iterative abstraction-refinement methodology that extends symbolic model checking. In our method, the initial abstract model is generated by an automatic analysis of the control structures in the program to be verified. Abstract models may admit erroneous (or "spurious") counterexamples. We devise new symbolic techniques that analyze such counterexamples and refine the abstract model correspondingly. We describe aSMV, a prototype implementation of our methodology in NuSMV. Practical experiments including a large Fujitsu IP core design with about 500 latches and 10000 lines of SMV code confirm the effectiveness of our approach.},
author = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
doi = {10.1145/876638.876643},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2003-ACM.Counterexample-Guided Abstraction Refinement for Symbolic Model Checking.pdf:pdf},
issn = {0004-5411},
journal = {Journal of the ACM},
number = {5},
pages = {752--794},
title = {{Counterexample-guided abstraction refinement for symbolic model checking}},
url = {http://portal.acm.org/citation.cfm?id=876643$\backslash$nhttp://portal.acm.org/ft\_gateway.cfm?id=876643\&type=pdf\&coll=GUIDE\&dl=GUIDE\&CFID=45815308\&CFTOKEN=61927748},
volume = {50},
year = {2003}
}
@inproceedings{Anand2008,
author = {Anand, Saswat and Godefroid, Patrice and Tillmann, Nikolai},
booktitle = {Proceedings of the 14th International Conference, TACAS},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/Demand-Driven Compositional Symbolic Execution - Anand 2008.pdf:pdf},
pages = {367--381},
title = {{Demand-Driven Compositional Symbolic Execution}},
year = {2008}
}
@article{BeyerBook,
author = {Beyer, Dirk and Gulwani, Sumit and Schmidt, David A},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/WS 14 15/Software Verification/Software Verification.pdf:pdf},
pages = {1--50},
title = {{Combining Model Checking and Data-Flow Analysis}}
year = {To be released}
}
@inproceedings{Ball2001,
abstract = {We show how to attack the problem of model checking a C program with recursive procedures using an abstraction that we formally define as the composition of the Boolean and the Cartesian abstractions. It is implemented through a source-to-source transformation into a ‘Boolean’ C program; we give an algorithm to compute the transformation with a cost that is exponential in its theoretical worst-case complexity but feasible in practice.},
author = {Ball, Tom and Podelski, Andreas and Rajamani, Sriram K},
booktitle = {Proceedings of the 7th International Conference, TACAS},
doi = {10.1007/3-540-45319-9},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2001-TACAS.Boolean and cartesian abstractions for model checking C programs.pdf:pdf},
isbn = {978-3-540-41865-8},
keywords = {abstract interpretation,engineering,model checking,program analysis,software,verification},
pages = {268--283},
title = {{Boolean and Cartesian abstractions for model checking C programs}},
year = {2001}
}
@inproceedings{Beyer2010,
abstract = {Several successful software model checkers are based on a technique called single-block encoding (SBE), which computes costly predicate abstractions after every single program operation. Large-block encoding (LBE) computes abstractions only after a large number of operations, and it was shown that this significantly improves the verification performance. In this work, we present adjustable-block encoding (ABE), a unifying framework that allows to express both previous approaches. In addition, it provides the flexibility to specify any block size between SBE and LBE, and also beyond LBE, through the adjustment of one single parameter. Such a unification of different concepts makes it easier to understand the fundamental properties of the analysis, and makes the differences of the variants more explicit. We evaluate different configurations on example C programs, and identify one that is currently the best.},
author = {Beyer, Dirk and Keremoglu, M. Erkan and Wendler, Philipp},
booktitle = {Proceedings of the 10th International Conference on Formal Methods in Computer-Aided Design (FMCAD 2010)},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2010-FMCAD.Predicate\_Abstraction\_with\_Adjustable-Block\_Encoding.pdf:pdf},
isbn = {978-1-4577-0734-6},
pages = {189--197},
title = {{Predicate abstraction with adjustable-block encoding}},
year = {2010}
}
@article{Beyer2011,
abstract = {Configurable software verification is a recent concept for expressing different program analysis and model checking approaches in one single formalism. This paper presents CPAchecker, a tool and framework that aims at easy integration of new verification components. Every abstract domain, together with the corresponding operations, is required to implement the interface of configurable program analysis (CPA). The main algorithm is configurable to perform a reachability analysis on arbitrary combinations of existing CPAs. The major design goal during the development was to provide a framework for developers that is flexible and easy to extend. We hope that researchers find it convenient and productive to implement new verification ideas and algorithms using this platform and that it advances the field by making it easier to perform practical experiments. The tool is implemented in Java and runs as command-line tool or as Eclipse plug-in. We evaluate the efficiency of our tool on benchmarks from the software model checker BLAST. The first released version of CPAchecker implements CPAs for predicate abstraction, octagon, and explicit-value domains. Binaries and the source code of CPAchecker are publicly available as free software.},
archivePrefix = {arXiv},
arxivId = {0902.0019},
author = {Beyer, Dirk and Keremoglu, M. Erkan},
doi = {10.1007/978-3-642-22110-1\_16},
eprint = {0902.0019},
file = {:C$\backslash$:/Users/leostrakosch/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Beyer, Keremoglu - 2011 - CPAchecker A tool for configurable software verification.pdf:pdf},
isbn = {9783642221095},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {184--190},
title = {{CPAchecker: A tool for configurable software verification}},
volume = {6806 LNCS},
year = {2011}
}
@inproceedings{Beyer2012,
abstract = {CEGAR, SMT solving, and Craig interpolation are$\backslash$nsuccessful approaches for software model checking. We compare$\backslash$ntwo of the most important algorithms that are based on these$\backslash$ntechniques: lazy predicate abstraction (as in B LAST) and lazy$\backslash$nabstraction with interpolants (as in I MPACT). We unify the algo-$\backslash$nrithms formally (by expressing both in the CPA framework) as$\backslash$nwell as in practice (by implementing them in the same tool). This$\backslash$nallows us to flexibly experiment with new configurations and gain$\backslash$nnew insights, both about their most important differences and$\backslash$ncommonalities, as well as about their performance characteristics.$\backslash$nWe show that the essential contribution of the I MPACT algorithm$\backslash$nis the reduction of the number of refinements, and compare this$\backslash$nto another approach for reducing refinement effort: adjustable-$\backslash$nblock encoding (ABE).},
author = {Beyer, Dirk and Wendler, Philipp},
booktitle = {Proceedings of the 12th International Conference on Formal Methods in Computer-Aided Design (FMCAD)},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2012-FMCAD.Algorithms\_for\_Software\_Model\_Checking.pdf:pdf},
isbn = {978-1-4673-4832-4},
pages = {106--113},
title = {{Algorithms for Software Model Checking: Predicate Abstraction vs. IMPACT}},
year = {2012}
}
@inproceedings{Beyer2013,
author = {Beyer, Dirk and L\"{o}we, Stefan},
doi = {10.1007/978-3-642-37057-1\_11},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2013-FASE.Explicit-State\_Software\_Model\_Checking\_Based\_on\_CEGAR\_and\_Interpolation.pdf:pdf},
isbn = {9783642370564},
issn = {03029743},
booktitle = {Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering (FASE)},
pages = {146--162},
title = {{Explicit-state software model checking based on CEGAR and interpolation}},
year = {2013}
}
@inproceedings{Beyer2015,
author = {Beyer, Dirk and L\"{o}we, Stefan and Wendler, Philipp},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/2015-Sliced Path Prefixes.pdf:pdf},
title = {{Sliced Path Prefixes}},
year = {2015}
}
@article{Beyer2007,
abstract = {In automatic software verification, we have observed a theoretical convergence of model checking and program analysis. In practice, however, model checkers are still mostly concerned with precision, e.g., the removal of spurious counterexamples; for this purpose they build and refine reachability trees. Lattice-based program analyzers, on the other hand, are primarily concerned with efficiency. We designed an algorithm and built a tool that can be configured to perform not only a purely tree-based or a purely lattice-based analysis, but offers many intermediate settings that have not been evaluated before. The algorithm and tool take one or more abstract interpreters, such as a predicate abstraction and a shape analysis, and configure their execution and interaction using several parameters. Our experiments show that such customization may lead to dramatic improvements in the precision-efficiency spectrum.},
author = {Beyer, Dirk and Henzinger, Thomas a. and Th\'{e}oduloz, Gr\'{e}gory},
doi = {10.1007/978-3-540-73368-3\_51},
file = {:C$\backslash$:/Users/leostrakosch/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Beyer, Henzinger, Th\'{e}oduloz - 2007 - Configurable Software Verification Concretizing the Convergence of Model Checking and Program Analy.pdf:pdf},
isbn = {978-3-540-73367-6},
issn = {03029743},
journal = {Computer Aided Verification},
pages = {504--518},
title = {{Configurable Software Verification: Concretizing the Convergence of Model Checking and Program Analysis}},
volume = {4590},
year = {2007}
}
@book{Myers2011,
author = {Myers, Glenford J. and Sandler, Corey and Badgett, Tom},
edition = {3rd},
publisher = {John Wiley \& Sons},
title = {{The Art of Software Testing}},
year = {2011}
}
@misc{SV15Benchmark,
author = {Beyer, Dirk},
title = {{Competition on Software Verification (SV-COMP) 2015: Benchmark Verification Tasks}},
url = {http://sv-comp.sosy-lab.org/2015/benchmarks.php},
urldate = {2015-03-07},
year = {2015}
}
@inproceedings{SV-COMP2013,
author = {Beyer, Dirk},
title = {{Second Competition on Software Verification (Summary of SV-COMP 2013)}},
booktitle = {Proc. TACAS},
series = {LNCS},
volume = {7795},
pages = {594--609},
publisher = {Springer},
year = {2013}
}
@inproceedings{SV-COMP2014,
author = {Beyer, Dirk},
title = {{Status Report on Software Verification (Competition Summary SV-COMP 2014)}},
booktitle = {Proc. TACAS},
series = {LNCS},
volume = {8413},
pages = {373--388},
publisher = {Springer},
year = {2014}
}
@inproceedings{SV-COMP2015,
author = {Beyer, Dirk},
title = {{Software Verification and Verifiable Witnesses (Report on SV-COMP 2015)}},
booktitle = {Proc. TACAS},
series = {LNCS},
publisher = {Springer},
year = {2015},
note = {(To appear)}
}
@misc{SV15Tasks,
author = {Beyer, Dirk},
title = {{SV-COMP15: Benchmark Verification Tasks}},
year = {2015},
howpublished = "\url{http://sv-comp.sosy-lab.org/2015/benchmarks.php}",
note = {Last checked: 03.31.2015}
}
@techreport{Lemberger2015,
address = {Passau},
author = {Lemberger, Thomas},
file = {:C$\backslash$:/Users/leostrakosch/Copy/Documents/Informatik/Software Verification/SymEx\_in\_CPAchecker.pdf:pdf},
institution = {Chair of Software Systems, University of Passau},
title = {{Symbolic Execution in CPAchecker}},
url = {http://leostrakosch.github.io/symbolicValueAnalysis/SymEx\_in\_CPAchecker.pdf},
year = {2015}
}