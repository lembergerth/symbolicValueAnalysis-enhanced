scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner -setprop cpa.value.symbolic.refinement.strategy=CONSTRAINTS_FIRST -setprop cpa.constraints.lessOrEqualType=SUBSET -setprop cegar.refiner=cpa.value.symbolic.refiner.delegation.SymbolicDelegatingRefiner -setprop cpa.value.refinement.pathSlicing=true -setprop cpa.value.refinement.prefixPreference=DOMAIN_GOOD_SHORT -timelimit 900s -stats -spec ../svcomp15/ntdrivers-simplified/ALL.prp ../svcomp15/ntdrivers-simplified/cdaudio_simpl1_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_127897277_tempdir
The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                5501936 (count: 276232, min: 0, max: 24, avg: 19.92)
Number of global variables:                         4142818 (count: 276232, min: 0, max: 15, avg: 15.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                  346068
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                3.462s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     1.491s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 0
Most constraints before refinement in state: 1
Constraints after refinement in state: 0
Constraints before refinement in state: 45152
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 895ms

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.472s
  Time for transition matches:                         1.427s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       712502 (count: 712502, min: 1, max: 1, avg: 1.00) [1 x 712502]

CPA algorithm statistics
------------------------
Number of iterations:            307212
Max size of waitlist:            21219
Average size of waitlist:        8814
Number of computed successors:   346068
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         15038
Number of times breaked:         70

Total time for CPA algorithm:       878.499s (Max:   866.223s)
  Time for choose from waitlist:      0.483s
  Time for precision adjustment:      6.395s
  Time for transfer relation:       194.222s
  Time for stop operator:           673.601s
  Time for adding to reached set:     1.443s

SymbolicDelegatingRefiner statistics
------------------------------------
Explicit refinements: 70
Successful explicit refinements: 70
Symbolic refinements: 0
Successful symbolic refinements: 0
Overall explicit refinement time: 2377ms
Average explicit refinement time: 33ms
Overall symbolic refinement time: 0ms
Average symbolic refinement time: 0ms

CEGAR algorithm statistics
--------------------------
Number of refinements:                70
Number of successful refinements:     70
Number of failed refinements:         0
Max. size of reached set before ref.: 10875
Max. size of reached set after ref.:  8445
Avg. size of reached set before ref.: 6425.91
Avg. size of reached set after ref.:  5643.07

Total time for CEGAR algorithm:     881.236s
Time for refinements:                 2.377s
Average time for refinement:          0.033s
Max time for refinement:              0.166s

Code Coverage
-----------------------------
  Function coverage:      0.571
  Visited lines:          474
  Total lines:            1497
  Line coverage:          0.317
  Visited conditions:     80
  Total conditions:       342
  Condition coverage:     0.234

CPAchecker general statistics
-----------------------------
Number of program locations:     968
Number of CFA edges:             1311
Number of relevant variables:    243
Number of functions:             28
Number of loops:                 1
Size of reached set:             276232
  Number of reached locations:   289 (30%)
    Avg states per location:     955
    Max states per location:     21192 (at node N46)
  Number of reached functions:   16 (57%)
  Number of partitions:          148904
    Avg size of partitions:      1
    Max size of partitions:      10597 (with key [N106 (before lines 204-227), Function CdAudioStartDevice called from node N175, stack depth 3 [8d61194], stack [main, CdAudioPnp, CdAudioStartDevice], Init])
  Number of target states:       0
  Size of final wait list        21218

Time for analysis setup:          2.461s
  Time for loading CPAs:          0.433s
  Time for loading parser:        0.672s
  Time for CFA construction:      1.251s
    Time for parsing file(s):     0.358s
    Time for AST to CFA:          0.340s
    Time for CFA sanity check:    0.074s
    Time for post-processing:     0.298s
      Time for var class.:        0.000s
Time for Analysis:              881.236s
CPU time for analysis:          895.730s
Total time for CPAchecker:      883.705s
Total CPU time for CPAchecker:  899.950s

Time for Garbage Collector:       5.326s (in 48 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               3445MB (  3285 MiB) max;   1264MB (  1205 MiB) avg;   3759MB (  3585 MiB) peak
Used non-heap memory:             23MB (    22 MiB) max;     23MB (    22 MiB) avg;     23MB (    22 MiB) peak
Used in PS Old Gen pool:         381MB (   364 MiB) max;    224MB (   213 MiB) avg;    381MB (   364 MiB) peak
Allocated heap memory:          4801MB (  4579 MiB) max;   3432MB (  3273 MiB) avg
Allocated non-heap memory:        26MB (    25 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  13610MB ( 12979 MiB) max;  13603MB ( 12973 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
