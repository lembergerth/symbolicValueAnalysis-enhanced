scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner -setprop cpa.value.symbolic.refinement.strategy=CONSTRAINTS_FIRST -setprop cpa.constraints.lessOrEqualType=SUBSET -setprop cegar.refiner=cpa.value.symbolic.refiner.delegation.SymbolicDelegatingRefiner -setprop cpa.value.refinement.pathSlicing=true -setprop cpa.value.refinement.prefixPreference=DOMAIN_GOOD_SHORT -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.12-rc1/ALL.prp ../svcomp15/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--isdn--gigaset--usb_gigaset.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1398030503_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 9604: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ldv_usb_submit_urb_2 to ldv_submit_urb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ldv_usb_submit_urb_4 to ldv_submit_urb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ldv_usb_submit_urb_6 to ldv_submit_urb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9613: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                 512260 (count: 40093, min: 0, max: 16, avg: 12.78)
Number of global variables:                          356153 (count: 40093, min: 0, max: 10, avg: 8.88)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                  641499
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                2.582s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     4.512s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 1
Most constraints before refinement in state: 2
Constraints after refinement in state: 98
Constraints before refinement in state: 11140
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 892ms

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.566s
  Time for transition matches:                         1.454s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       813796 (count: 813796, min: 1, max: 1, avg: 1.00) [1 x 813796]

CPA algorithm statistics
------------------------
Number of iterations:            579200
Max size of waitlist:            1051
Average size of waitlist:        305
Number of computed successors:   641499
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         56335
Number of times breaked:         28

Total time for CPA algorithm:        56.480s (Max:     5.904s)
  Time for choose from waitlist:      0.624s
  Time for precision adjustment:      6.177s
  Time for transfer relation:        34.421s
  Time for stop operator:            10.162s
  Time for adding to reached set:     1.562s

SymbolicDelegatingRefiner statistics
------------------------------------
Explicit refinements: 28
Successful explicit refinements: 10
Symbolic refinements: 18
Successful symbolic refinements: 17
Overall explicit refinement time: 3798ms
Average explicit refinement time: 135ms
Overall symbolic refinement time: 211399ms
Average symbolic refinement time: 11744ms

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     27
Number of failed refinements:         0
Max. size of reached set before ref.: 67730
Max. size of reached set after ref.:  21195
Avg. size of reached set before ref.: 33740.39
Avg. size of reached set after ref.:  13317.26

Total time for CEGAR algorithm:     271.826s
Time for refinements:               215.197s
Average time for refinement:          7.685s
Max time for refinement:             19.437s

Code Coverage
-----------------------------
  Function coverage:      0.864
  Visited lines:          7102
  Total lines:            7187
  Line coverage:          0.988
  Visited conditions:     419
  Total conditions:       470
  Condition coverage:     0.891

CPAchecker general statistics
-----------------------------
Number of program locations:     1376
Number of CFA edges:             1909
Number of relevant variables:    365
Number of functions:             88
Number of loops:                 4
Size of reached set:             40093
  Number of reached locations:   1219 (89%)
    Avg states per location:     32
    Max states per location:     630 (at node N93)
  Number of reached functions:   76 (86%)
  Number of partitions:          30580
    Avg size of partitions:      1
    Max size of partitions:      486 (with key [N1464 (before line 9139), Function main called from node N1133, stack depth 1 [3089e184], stack [main], Init])
  Number of target states:       1
  Size of final wait list        486

Time for analysis setup:          3.412s
  Time for loading CPAs:          0.491s
  Time for loading parser:        0.503s
  Time for CFA construction:      2.344s
    Time for parsing file(s):     0.864s
    Time for AST to CFA:          0.789s
    Time for CFA sanity check:    0.099s
    Time for post-processing:     0.386s
      Time for var class.:        0.000s
Time for Analysis:              271.827s
CPU time for analysis:          282.220s
Total time for CPAchecker:      275.244s
Total CPU time for CPAchecker:  288.170s

Time for Garbage Collector:       1.089s (in 8 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               3386MB (  3229 MiB) max;   1675MB (  1597 MiB) avg;   3398MB (  3241 MiB) peak
Used non-heap memory:             24MB (    23 MiB) max;     24MB (    23 MiB) avg;     25MB (    24 MiB) peak
Used in PS Old Gen pool:          24MB (    23 MiB) max;     10MB (    10 MiB) avg;     24MB (    23 MiB) peak
Allocated heap memory:          4824MB (  4601 MiB) max;   4339MB (  4138 MiB) avg
Allocated non-heap memory:        27MB (    25 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  13606MB ( 12976 MiB) max;  13598MB ( 12968 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 6666) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
