scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -setprop analysis.checkCounterexamples=false -timelimit 900s -stats -spec ../svcomp15/ntdrivers/ALL.prp ../svcomp15/ntdrivers/parport_false-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1927752918_tempdir
line 6237: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6238: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6239: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6288: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6312: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6324: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6765: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6766: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6767: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6830: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6910: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6922: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 8322: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8333: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8649: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8650: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8658: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8659: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8667: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 9189: Dereferencing of non-pointer type PULONG  in expression *PortNumber (ASTConverter.convert, WARNING)

line 9490: Dereferencing of non-pointer type PULONG  in expression *PRegFlags (ASTConverter.convert, WARNING)

line 9520: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker
 counterexample.checker.config 
 (CPAchecker.printConfigurationWarnings, WARNING)

Skipping recursive function call from PptClearChipMode to PptClearChipMode (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from PptSetChipMode to PptClearChipMode (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from PptSetChipMode to PptSetChipMode (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from PptClearChipMode to PptSetChipMode (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                 177224 (count: 10934, min: 0, max: 19, avg: 16.21)
Number of global variables:                          164919 (count: 10934, min: 0, max: 16, avg: 15.08)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                  101352
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.573s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.768s
  Time for transition matches:                         0.324s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       160779 (count: 160779, min: 1, max: 1, avg: 1.00) [1 x 160779]

CPA algorithm statistics
------------------------
Number of iterations:            90004
Max size of waitlist:            73
Average size of waitlist:        27
Number of computed successors:   101352
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         11000
Number of times breaked:         62

Total time for CPA algorithm:         5.689s (Max:     0.498s)
  Time for choose from waitlist:      0.142s
  Time for precision adjustment:      1.106s
  Time for transfer relation:         2.914s
  Time for stop operator:             0.333s
  Time for adding to reached set:     0.370s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:             62
Total number of targets found:           62
Time for completing refinement:           1.769s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                62
Number of successful refinements:     61
Number of failed refinements:         0
Max. size of reached set before ref.: 11083
Max. size of reached set after ref.:  11005
Avg. size of reached set before ref.: 8690.48
Avg. size of reached set after ref.:  7351.75

Total time for CEGAR algorithm:       8.721s
Time for refinements:                 2.715s
Average time for refinement:          0.043s
Max time for refinement:              0.249s

Code Coverage
-----------------------------
  Function coverage:      0.591
  Visited lines:          5618
  Total lines:            6405
  Line coverage:          0.877
  Visited conditions:     854
  Total conditions:       1150
  Condition coverage:     0.743

CPAchecker general statistics
-----------------------------
Number of program locations:     3326
Number of CFA edges:             4354
Number of relevant variables:    917
Number of functions:             181
Number of loops:                 37
Size of reached set:             10934
  Number of reached locations:   2465 (74%)
    Avg states per location:     4
    Max states per location:     53 (at node N43)
  Number of reached functions:   107 (59%)
  Number of partitions:          9984
    Avg size of partitions:      1
    Max size of partitions:      17 (with key [N4846 (before line 9731), Function main called from node N4830, stack depth 1 [62f0926b], stack [main], Init])
  Number of target states:       1
  Size of final wait list        24

Time for analysis setup:          4.448s
  Time for loading CPAs:          0.666s
  Time for loading parser:        0.568s
  Time for CFA construction:      3.144s
    Time for parsing file(s):     0.932s
    Time for AST to CFA:          1.071s
    Time for CFA sanity check:    0.176s
    Time for post-processing:     0.801s
      Time for var class.:        0.000s
Time for Analysis:                8.721s
CPU time for analysis:           14.430s
Total time for CPAchecker:       13.175s
Total CPU time for CPAchecker:   22.320s

Time for Garbage Collector:       0.313s (in 2 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                675MB (   644 MiB) max;    264MB (   252 MiB) avg;    691MB (   659 MiB) peak
Used non-heap memory:             24MB (    23 MiB) max;     19MB (    19 MiB) avg;     24MB (    23 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2553MB (  2435 MiB) max;   2090MB (  1993 MiB) avg
Allocated non-heap memory:        25MB (    24 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:  13579MB ( 12950 MiB) max;  13579MB ( 12950 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 2250) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
