scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -timelimit 900s -stats -spec ../svcomp15/eca-rers2012/ALL.prp ../svcomp15/eca-rers2012/Problem13_label51_false-unreach-call.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1981800289_tempdir
Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                               76560695 (count: 9564545, min: 0, max: 9, avg: 8.00)
Number of global variables:                        57387258 (count: 9564545, min: 0, max: 6, avg: 6.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                12437386
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:               28.936s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 61.221s
  Time for transition matches:                        22.622s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                     12622084 (count: 12624049, min: 0, max: 1, avg: 1.00) [0 x 1965, 1 x 12622084]

CPA algorithm statistics
------------------------
Number of iterations:            11820171
Max size of waitlist:            16472
Average size of waitlist:        7009
Number of computed successors:   12437386
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         595942
Number of times breaked:         8

Total time for CPA algorithm:       685.406s (Max:   603.963s)
  Time for choose from waitlist:     11.450s
  Time for precision adjustment:     72.760s
  Time for transfer relation:       165.726s
  Time for stop operator:           315.153s
  Time for adding to reached set:    58.951s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:              8
Total number of targets found:            8
Time for completing refinement:           8.759s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 1424383
Max. size of reached set after ref.:  165894
Avg. size of reached set before ref.: 305352.00
Avg. size of reached set after ref.:  20739.50

Total time for CEGAR algorithm:     694.345s
Time for refinements:                 8.899s
Average time for refinement:          1.112s
Max time for refinement:              3.654s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          2674
  Total lines:            4769
  Line coverage:          0.561
  Visited conditions:     13176
  Total conditions:       15642
  Condition coverage:     0.842

CPAchecker general statistics
-----------------------------
Number of program locations:     8994
Number of CFA edges:             16818
Number of relevant variables:    11
Number of functions:             5
Number of loops:                 1
Size of reached set:             9564545
  Size of final wait list        16471

Time for analysis setup:          6.116s
  Time for loading CPAs:          0.532s
  Time for loading parser:        0.520s
  Time for CFA construction:      4.978s
    Time for parsing file(s):     1.084s
    Time for AST to CFA:          1.489s
    Time for CFA sanity check:    0.409s
    Time for post-processing:     1.764s
      Time for var class.:        0.000s
Time for Analysis:              694.345s
CPU time for analysis:          889.270s
Total time for CPAchecker:      700.468s
Total CPU time for CPAchecker:  900.440s

Time for Garbage Collector:     192.304s (in 72 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               8536MB (  8141 MiB) max;   4225MB (  4030 MiB) avg;   9943MB (  9483 MiB) peak
Used non-heap memory:             24MB (    22 MiB) max;     21MB (    20 MiB) avg;     24MB (    22 MiB) peak
Used in PS Old Gen pool:        6111MB (  5828 MiB) max;   2952MB (  2815 MiB) avg;   6111MB (  5828 MiB) peak
Allocated heap memory:          9628MB (  9182 MiB) max;   6813MB (  6498 MiB) avg
Allocated non-heap memory:        46MB (    44 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:  13580MB ( 12951 MiB) max;  13579MB ( 12950 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
