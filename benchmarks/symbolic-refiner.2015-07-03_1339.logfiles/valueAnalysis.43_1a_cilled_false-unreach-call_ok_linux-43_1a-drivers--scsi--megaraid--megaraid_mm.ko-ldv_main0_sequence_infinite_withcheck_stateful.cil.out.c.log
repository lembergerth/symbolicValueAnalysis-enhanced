scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.4-simple/ALL.prp ../svcomp15/ldv-linux-3.4-simple/43_1a_cilled_false-unreach-call_ok_linux-43_1a-drivers--scsi--megaraid--megaraid_mm.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_304479248_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6870: Function pointer *__cil_tmp13 with type int (*)(unsigned long, uioc_t *, uint32_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Infeasible counterexample found, but could not remove it from the ARG. Therefore, we cannot prove safety. (CounterexampleCheckAlgorithm.checkCounterexample, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6870: Ignoring call via function pointer lld_ioctl::__cil_tmp13 for which no suitable target was found in line: rval = (*__cil_tmp13)(__cil_tmp16, kioc, 1U); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4158: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(__cil_tmp11, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                  47121 (count: 7442, min: 0, max: 7, avg: 6.33)
Number of global variables:                               0 (count: 7442, min: 0, max: 0, avg: 0.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                   12635
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.192s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.717s
  Time for transition matches:                         0.283s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                        34670 (count: 34670, min: 1, max: 1, avg: 1.00) [1 x 34670]

CPA algorithm statistics
------------------------
Number of iterations:            11618
Max size of waitlist:            33
Average size of waitlist:        22
Number of computed successors:   12635
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         735
Number of times breaked:         51

Total time for CPA algorithm:         2.640s (Max:     0.314s)
  Time for choose from waitlist:      0.073s
  Time for precision adjustment:      0.484s
  Time for transfer relation:         1.427s
  Time for stop operator:             0.189s
  Time for adding to reached set:     0.137s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:             51
Total number of targets found:           51
Time for completing refinement:           2.881s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                51
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 6910
Max. size of reached set after ref.:  5989
Avg. size of reached set before ref.: 3392.06
Avg. size of reached set after ref.:  2293.62

Total time for CEGAR algorithm:       7.298s
Time for refinements:                 4.652s
Average time for refinement:          0.091s
Max time for refinement:              0.511s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    30
Number of infeasible paths:         30 (100%)
Time for counterexample checks:        21.154s

Code Coverage
-----------------------------
  Function coverage:      0.620
  Visited lines:          5127
  Total lines:            6293
  Line coverage:          0.815
  Visited conditions:     195
  Total conditions:       270
  Condition coverage:     0.722

CPAchecker general statistics
-----------------------------
Number of program locations:     894
Number of CFA edges:             1145
Number of relevant variables:    1213
Number of functions:             50
Number of loops:                 12
Size of reached set:             7442
  Number of reached locations:   589 (66%)
    Avg states per location:     12
    Max states per location:     226 (at node N97)
  Number of reached functions:   31 (62%)
  Number of partitions:          5484
    Avg size of partitions:      1
    Max size of partitions:      21 (with key [N1392 (before line 6299), Function mraid_mm_attach_buf called from node N1102, stack depth 5 [1a1ee7c0], stack [main, mraid_mm_compat_ioctl, mraid_mm_ioctl, mimd_to_kioc, mraid_mm_attach_buf], Init])
  Number of target states:       0

Time for analysis setup:          4.464s
  Time for loading CPAs:          0.748s
  Time for loading parser:        0.818s
  Time for CFA construction:      2.780s
    Time for parsing file(s):     0.893s
    Time for AST to CFA:          0.948s
    Time for CFA sanity check:    0.128s
    Time for post-processing:     0.635s
      Time for var class.:        0.000s
Time for Analysis:               28.495s
CPU time for analysis:           40.510s
Total time for CPAchecker:       32.966s
Total CPU time for CPAchecker:   48.270s

Time for Garbage Collector:       0.581s (in 4 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               1097MB (  1046 MiB) max;    394MB (   376 MiB) avg;   1110MB (  1059 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     24MB (    23 MiB) avg;     27MB (    26 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          3611MB (  3444 MiB) max;   2367MB (  2257 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  13732MB ( 13096 MiB) max;  13648MB ( 13016 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
