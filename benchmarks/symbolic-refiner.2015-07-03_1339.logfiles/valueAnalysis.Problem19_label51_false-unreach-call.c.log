scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -timelimit 900s -stats -spec ../svcomp15/eca-rers2012/ALL.prp ../svcomp15/eca-rers2012/Problem19_label51_false-unreach-call.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1102942543_tempdir
Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                               24978998 (count: 3250065, min: 0, max: 8, avg: 7.69)
Number of global variables:                        16250315 (count: 3250065, min: 0, max: 5, avg: 5.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                15957885
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:               60.941s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                101.350s
  Time for transition matches:                        50.297s
  Time for transition assertions:                      0.022s
  Time for transition actions:                         0.036s
Automaton transfers with branching:                0
Automaton transfer successors:                     16143301 (count: 16154720, min: 0, max: 1, avg: 1.00) [0 x 11419, 1 x 16143301]

CPA algorithm statistics
------------------------
Number of iterations:            14664444
Max size of waitlist:            4465
Average size of waitlist:        1792
Number of computed successors:   15957885
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         1277924
Number of times breaked:         8

Total time for CPA algorithm:       649.706s (Max:   221.359s)
  Time for choose from waitlist:     15.521s
  Time for precision adjustment:    141.081s
  Time for transfer relation:       224.941s
  Time for stop operator:           137.575s
  Time for adding to reached set:    40.985s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:              8
Total number of targets found:            8
Time for completing refinement:          51.451s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 4775981
Max. size of reached set after ref.:  11945
Avg. size of reached set before ref.: 1431566.13
Avg. size of reached set after ref.:  2829.00

Total time for CEGAR algorithm:     701.494s
Time for refinements:                51.780s
Average time for refinement:          6.472s
Max time for refinement:             20.189s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          4542
  Total lines:            8025
  Line coverage:          0.566
  Visited conditions:     19093
  Total conditions:       23766
  Condition coverage:     0.803

CPAchecker general statistics
-----------------------------
Number of program locations:     13714
Number of CFA edges:             25602
Number of relevant variables:    12
Number of functions:             7
Number of loops:                 1
Size of reached set:             3250065
  Size of final wait list        2882

Time for analysis setup:          6.631s
  Time for loading CPAs:          0.552s
  Time for loading parser:        0.574s
  Time for CFA construction:      5.419s
    Time for parsing file(s):     1.269s
    Time for AST to CFA:          1.745s
    Time for CFA sanity check:    0.248s
    Time for post-processing:     1.968s
      Time for var class.:        0.000s
Time for Analysis:              701.494s
CPU time for analysis:          889.790s
Total time for CPAchecker:      708.132s
Total CPU time for CPAchecker:  901.790s

Time for Garbage Collector:     183.104s (in 84 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               5829MB (  5559 MiB) max;   3112MB (  2968 MiB) avg;   8275MB (  7891 MiB) peak
Used non-heap memory:             23MB (    22 MiB) max;     21MB (    20 MiB) avg;     24MB (    23 MiB) peak
Used in PS Old Gen pool:        4038MB (  3850 MiB) max;   1943MB (  1853 MiB) avg;   4330MB (  4130 MiB) peak
Allocated heap memory:          7225MB (  6891 MiB) max;   5694MB (  5430 MiB) avg
Allocated non-heap memory:        46MB (    44 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:  13579MB ( 12950 MiB) max;  13579MB ( 12950 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
