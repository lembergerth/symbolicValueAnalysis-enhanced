scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.4-simple/ALL.prp ../svcomp15/ldv-linux-3.4-simple/32_7_cilled_false-unreach-call_const_ok_linux-32_1-drivers--vhost--vhost_net.ko-ldv_main1_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-608578751_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 29498: Function pointer *__cil_tmp24 with type int (*)(struct socket *sock, struct sockaddr *addr, int *sockaddr_len, int peer) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28114: Function pointer *__cil_tmp153 with type int (*)(struct kiocb *iocb, struct socket *sock, struct msghdr *m, size_t total_len, int flags) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 26663: Function pointer *__cil_tmp276 with type int (*)(struct kiocb *iocb, struct socket *sock, struct msghdr *m, size_t total_len) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

Infeasible counterexample found, but could not remove it from the ARG. Therefore, we cannot prove safety. (CounterexampleCheckAlgorithm.checkCounterexample, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6879: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(to, 0); (CounterexampleCheck:PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                   7977 (count: 6191, min: 0, max: 5, avg: 1.29)
Number of global variables:                            6189 (count: 6191, min: 0, max: 1, avg: 1.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                    7461
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.089s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.195s
Automaton transfers with branching:                0
Automaton transfer successors:                        24997 (count: 24997, min: 1, max: 1, avg: 1.00) [1 x 24997]

CPA algorithm statistics
------------------------
Number of iterations:            7091
Max size of waitlist:            22
Average size of waitlist:        11
Number of computed successors:   7461
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         330
Number of times breaked:         31

Total time for CPA algorithm:         1.183s (Max:     0.211s)
  Time for choose from waitlist:      0.024s
  Time for precision adjustment:      0.220s
  Time for transfer relation:         0.679s
  Time for stop operator:             0.024s
  Time for adding to reached set:     0.103s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:             31
Total number of targets found:           31
Time for completing refinement:           1.200s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     15
Number of failed refinements:         0
Max. size of reached set before ref.: 4116
Max. size of reached set after ref.:  4087
Avg. size of reached set before ref.: 1998.35
Avg. size of reached set after ref.:  1929.60

Total time for CEGAR algorithm:       4.025s
Time for refinements:                 2.841s
Average time for refinement:          0.091s
Max time for refinement:              0.376s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    16
Number of infeasible paths:         16 (100%)
Time for counterexample checks:         9.686s

Code Coverage
-----------------------------
  Function coverage:      0.539
  Visited lines:          12211
  Total lines:            23365
  Line coverage:          0.523
  Visited conditions:     281
  Total conditions:       934
  Condition coverage:     0.301

CPAchecker general statistics
-----------------------------
Number of program locations:     3629
Number of CFA edges:             4884
Number of relevant variables:    4411
Number of functions:             154
Number of loops:                 27
Size of reached set:             6191
  Number of reached locations:   1342 (37%)
    Avg states per location:     4
    Max states per location:     108 (at node N240)
  Number of reached functions:   83 (54%)
  Number of partitions:          6123
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2512 (before line 10657), Function vhost_dev_check_owner called from node N4949, stack depth 5 [3395057], stack [main, vhost_net_compat_ioctl, vhost_net_ioctl, vhost_dev_ioctl, vhost_dev_check_owner], Init])
  Number of target states:       0

Time for analysis setup:          7.914s
  Time for loading CPAs:          0.733s
  Time for loading parser:        0.546s
  Time for CFA construction:      6.558s
    Time for parsing file(s):     1.842s
    Time for AST to CFA:          2.047s
    Time for CFA sanity check:    0.705s
    Time for post-processing:     1.722s
      Time for var class.:        0.000s
Time for Analysis:               13.738s
CPU time for analysis:           22.950s
Total time for CPAchecker:       21.657s
Total CPU time for CPAchecker:   37.750s

Time for Garbage Collector:       0.460s (in 3 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               1103MB (  1052 MiB) max;    364MB (   347 MiB) avg;   1114MB (  1062 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     21MB (    20 MiB) avg;     28MB (    26 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2553MB (  2435 MiB) max;   2188MB (  2087 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:  13671MB ( 13038 MiB) max;  13628MB ( 12997 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
