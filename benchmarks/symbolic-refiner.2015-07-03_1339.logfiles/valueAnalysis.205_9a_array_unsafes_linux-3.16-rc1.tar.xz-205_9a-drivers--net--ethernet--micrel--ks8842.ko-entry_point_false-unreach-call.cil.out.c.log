scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--micrel--ks8842.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_977639993_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 6534-6535: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6627-6628: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6581: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6420: Function pointer *(chan->device->device_prep_slave_sg) with type struct dma_async_tx_descriptor * (*)(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction , unsigned long, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8999: Function pointer *(rx_ctl->chan->device->device_control) with type int (*)(struct dma_chan *, enum dma_ctrl_cmd , unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8990: Function pointer *(tx_ctl->chan->device->device_control) with type int (*)(struct dma_chan *, enum dma_ctrl_cmd , unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

Skipping recursive function call from dma_mapping_error to ks8842_xmit_frame (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __ks8842_start_new_rx_dma to ks8842_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ks8842_tx_frame_dma to ks8842_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

Highest possible value reached in score computation. Error path prefix preference may not be applied reliably. (VariableClassification.obtainDomainTypeScoreForVariables, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Infeasible counterexample found, but could not remove it from the ARG. Therefore, we cannot prove safety. (CounterexampleCheckAlgorithm.checkCounterexample, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer kmalloc::__retval__ to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 9120:	N1484 -{tx_ctl->buf = kmalloc(2048UL, 208U);}-> N1490) (CounterexampleCheck:PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

lines 6534-6535: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6420: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, sgl, sg_len, dir, flags, (void *)0); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8175: Ignoring function call through function pointer *(ctl->adesc->tx_submit): (*(ctl->adesc->tx_submit))(ctl->adesc); (CounterexampleCheck:PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                               73917746 (count: 8813060, min: 0, max: 11, avg: 8.39)
Number of global variables:                        63836950 (count: 8813060, min: 0, max: 8, avg: 7.24)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                13070406
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:               42.471s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 70.946s
  Time for transition matches:                        28.799s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     17045830 (count: 17045830, min: 1, max: 1, avg: 1.00) [1 x 17045830]

CPA algorithm statistics
------------------------
Number of iterations:            12063999
Max size of waitlist:            186
Average size of waitlist:        92
Number of computed successors:   13070406
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         1006268
Number of times breaked:         88

Total time for CPA algorithm:       462.131s (Max:    91.499s)
  Time for choose from waitlist:     11.245s
  Time for precision adjustment:     94.045s
  Time for transfer relation:       180.783s
  Time for stop operator:            52.672s
  Time for adding to reached set:    54.910s

ValueAnalysisRefiner statistics
-------------------------------
Total number of refinements:             88
Total number of targets found:           88
Time for completing refinement:          65.855s
  Time for interpolation:                              0.000s
  Number of interpolations:                               0
  Number of interpolation queries:                        0 (count: 0, min: 0, max: 0, avg: 0.00)
  Size of interpolant:                                    0 (count: 0, min: 0, max: 0, avg: 0.00)
  Number of infeasible sliced prefixes:                   0 (count: 0, min: 0, max: 0, avg: 0.00)
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
Total number of root relocations:         0
Total number of similar, repeated refinements:         0

CEGAR algorithm statistics
--------------------------
Number of refinements:                88
Number of successful refinements:     73
Number of failed refinements:         0
Max. size of reached set before ref.: 8813060
Max. size of reached set after ref.:  305482
Avg. size of reached set before ref.: 885194.43
Avg. size of reached set after ref.:  215028.26

Total time for CEGAR algorithm:     541.085s
Time for refinements:                72.035s
Average time for refinement:          0.818s
Max time for refinement:             34.021s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    15
Number of infeasible paths:         14 (93%)
Time for counterexample checks:        70.522s

Code Coverage
-----------------------------
  Function coverage:      0.703
  Visited lines:          6942
  Total lines:            7457
  Line coverage:          0.931
  Visited conditions:     364
  Total conditions:       484
  Condition coverage:     0.752

CPAchecker general statistics
-----------------------------
Number of program locations:     1782
Number of CFA edges:             2518
Number of relevant variables:    610
Number of functions:             148
Number of loops:                 13
Size of reached set:             8813060
  Size of final wait list        55

Time for analysis setup:          4.055s
  Time for loading CPAs:          0.584s
  Time for loading parser:        0.678s
  Time for CFA construction:      2.718s
    Time for parsing file(s):     1.023s
    Time for AST to CFA:          0.899s
    Time for CFA sanity check:    0.092s
    Time for post-processing:     0.523s
      Time for var class.:        0.000s
Time for Analysis:              655.493s
CPU time for analysis:          893.650s
Total time for CPAchecker:      659.554s
Total CPU time for CPAchecker:  900.690s

Time for Garbage Collector:     340.465s (in 59 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               7985MB (  7615 MiB) max;   3723MB (  3551 MiB) avg;  10594MB ( 10103 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     25MB (    23 MiB) avg;     28MB (    27 MiB) peak
Used in PS Old Gen pool:        6702MB (  6391 MiB) max;   2396MB (  2285 MiB) avg;   6702MB (  6391 MiB) peak
Allocated heap memory:          9621MB (  9175 MiB) max;   6318MB (  6025 MiB) avg
Allocated non-heap memory:        52MB (    50 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:  13665MB ( 13032 MiB) max;  13645MB ( 13013 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
