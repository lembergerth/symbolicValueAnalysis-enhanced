scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--tuners--tda18271.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-1206507525_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 9053: Function pointer *(fe->callback) with type int (*)(void *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5818: Function pointer *(fe->ops.i2c_gate_ctrl) with type int (*)(struct dvb_frontend *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5807: Function pointer *(fe->ops.analog_ops.i2c_gate_ctrl) with type int (*)(struct dvb_frontend *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9240: Function pointer *(fe->ops.analog_ops.standby) with type void (*)(struct dvb_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

lines 6885-6886: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_standby_mode", "sm = %d, sm_lt = %d, sm_xt = %d\n", sm, sm_lt, sm_xt) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7293: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

lines 6462-6463: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "__tda18271_write_regs", "ERROR: idx = 0x%x, len = %d, i2c_transfer returned: %d\n", idx, max, ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8951: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 871) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6217-6218: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_read_regs", "ERROR: i2c_transfer returned: %d\n", ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5849: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "=== TDA18271 REG DUMP ===\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5856-5857: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "ID_BYTE            = 0x%02x\n", (int)(*regs)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5864-5865: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "THERMO_BYTE        = 0x%02x\n", (int)(*(regs + 1UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5872-5873: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "POWER_LEVEL_BYTE   = 0x%02x\n", (int)(*(regs + 2UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5880-5881: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_1   = 0x%02x\n", (int)(*(regs + 3UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5888-5889: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_2   = 0x%02x\n", (int)(*(regs + 4UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5896-5897: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_3   = 0x%02x\n", (int)(*(regs + 5UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5904-5905: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_4   = 0x%02x\n", (int)(*(regs + 6UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5912-5913: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_5   = 0x%02x\n", (int)(*(regs + 7UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5920-5921: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_POST_DIV_BYTE  = 0x%02x\n", (int)(*(regs + 8UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5928-5929: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_1     = 0x%02x\n", (int)(*(regs + 9UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5936-5937: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_2     = 0x%02x\n", (int)(*(regs + 10UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5944-5945: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_3     = 0x%02x\n", (int)(*(regs + 11UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5952-5953: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_POST_DIV_BYTE = 0x%02x\n", (int)(*(regs + 12UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5960-5961: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_1    = 0x%02x\n", (int)(*(regs + 13UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5968-5969: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_2    = 0x%02x\n", (int)(*(regs + 14UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5976-5977: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_3    = 0x%02x\n", (int)(*(regs + 15UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5991-5992: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_1    = 0x%02x\n", (int)(*(regs + 16UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5999-6000: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_2    = 0x%02x\n", (int)(*(regs + 17UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6007-6008: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_3    = 0x%02x\n", (int)(*(regs + 18UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6015-6016: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_4    = 0x%02x\n", (int)(*(regs + 19UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6023-6024: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_5    = 0x%02x\n", (int)(*(regs + 20UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6031-6032: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_6    = 0x%02x\n", (int)(*(regs + 21UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6039-6040: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_7    = 0x%02x\n", (int)(*(regs + 22UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6047-6048: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_8    = 0x%02x\n", (int)(*(regs + 23UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6055-6056: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_9  W = 0x%02x\n", (int)(*(regs + 24UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6063-6064: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_10   = 0x%02x\n", (int)(*(regs + 25UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6071-6072: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_11   = 0x%02x\n", (int)(*(regs + 26UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6079-6080: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_12   = 0x%02x\n", (int)(*(regs + 27UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6087-6088: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_13   = 0x%02x\n", (int)(*(regs + 28UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6095-6096: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_14   = 0x%02x\n", (int)(*(regs + 29UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6103-6104: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_15   = 0x%02x\n", (int)(*(regs + 30UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6111-6112: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_16 W = 0x%02x\n", (int)(*(regs + 31UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6119-6120: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_17 W = 0x%02x\n", (int)(*(regs + 32UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6127-6128: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_18   = 0x%02x\n", (int)(*(regs + 33UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6135-6136: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_19 W = 0x%02x\n", (int)(*(regs + 34UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6143-6144: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_20 W = 0x%02x\n", (int)(*(regs + 35UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6151-6152: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_21   = 0x%02x\n", (int)(*(regs + 36UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6159-6160: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_22   = 0x%02x\n", (int)(*(regs + 37UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6167-6168: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_23   = 0x%02x\n", (int)(*(regs + 38UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8907-8908: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_ir_cal_init", "error %d on line %d\n", ret, 852) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6539-6540: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_init_regs", "initializing registers for device @ %d-%04x\n", tmp, (int)(priv->i2c_props.addr)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8969: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 876) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8374-8375: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan_init", "error %d on line %d\n", ret, 591) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8395-8396: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan_init", "error %d on line %d\n", ret, 596) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8604-8605: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_rf_filter_curve", "error %d on line %d\n", ret, 694) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4988-4989: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_thermometer", "(%d) tm = %d\n", i, val) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5136-5137: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_rf_band", "(%d) rf_band = %02x\n", i, __CPAchecker_TMP_1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5095-5101: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_rf_band", "(%d) rfmax = %d < freq = %d, rf1_def = %d, rf2_def = %d, rf3_def = %d, rf1 = %d, rf2 = %d, rf3 = %d, rf_a1 = %d, rf_a2 = %d, rf_b1 = %d, rf_b2 = %d\n", i, ((map + ((unsigned long)i))->rfmax) * 1000U, *freq, (map + ((unsigned long)i))->rf1_def, (map + ((unsigned long)i))->rf2_def, (map + ((unsigned long)i))->rf3_def, (map + ((unsigned long)i))->rf1, (map + ((unsigned long)i))->rf2, (map + ((unsigned long)i))->rf3, (map + ((unsigned long)i))->rf_a1, (map + ((unsigned long)i))->rf_a2, (map + ((unsigned long)i))->rf_b1, (map + ((unsigned long)i))->rf_b2) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8452-8453: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_rf_tracking_filters_init", "error %d on line %d\n", i, 627) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8485-8486: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_rf_tracking_filters_init", "freq = %d, rf = %d\n", freq, rf) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5372-5373: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_map", "%s: frequency (%d) out of range\n", map_name, *freq) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5400-5401: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_map", "(%d) %s: 0x%02x\n", i, map_name, (int)(*val)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5356: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_lookup_map", "%s map is not set!\n", map_name) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7122-7123: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_rf_band", "error %d on line %d\n", ret, 692) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7167-7168: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_gain_taper", "error %d on line %d\n", ret, 709) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5053-5054: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_cid_target", "(%d) cid_target = %02x, count_limit = %d\n", i, (int)((tda18271_cid_target[i]).target), (int)((tda18271_cid_target[i]).limit)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5221-5222: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_pll_map", "%s: frequency (%d) out of range\n", map_name, *freq) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5251-5252: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_pll_map", "(%d) %s: post div = 0x%02x, div = 0x%02x\n", i, map_name, (int)(*post_div), (int)(*div)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5205: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_lookup_pll_map", "%s map is not set!\n", map_name) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6929-6930: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_main_pll", "error %d on line %d\n", ret, 611) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6276-6277: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_read_extended", "ERROR: i2c_transfer returned: %d\n", ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8232: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan", "error %d on line %d\n", ret, 518) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8281: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan", "error %d on line %d\n", ret, 546) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8336-8337: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_powerscan", "bcal = %d, freq_in = %d, freq_out = %d (freq = %d)\n", bcal, *freq_in, *freq_out, freq) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8497-8498: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_rf_tracking_filters_init", "error %d on line %d\n", bcal, 641) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7033-7034: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_bp_filter", "error %d on line %d\n", ret, 658) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7078: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_km", "error %d on line %d\n", ret, 675) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6982-6983: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_cal_pll", "error %d on line %d\n", ret, 634) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8628-8629: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_rf_filter_curve", "error %d on line %d\n", ret, 702) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8694-8695: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_cal_init", "error %d on line %d\n", ret, 727) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8008: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 353) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8030: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 359) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8050: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 366) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8713-8714: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_cal_init", "error %d on line %d\n", ret, 731) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9685-9686: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"fm") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9710-9711: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv b") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9735-9736: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv dk") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9760-9761: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv gh") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9785-9786: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv i") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9810-9811: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv l") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9835-9836: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv l\'") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9860-9861: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv mn") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9885-9886: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atsc 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9910-9911: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9935-9936: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 7") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9960-9961: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 8") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9985-9986: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"qam 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 10010-10011: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"qam 8") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9357-9358: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_analog_params", "setting tda18271 to system %s\n", mode) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9089-9090: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_tune", "freq = %d, ifc = %d, bw = %d, agc_mode = %d, std = %d\n", freq, __CPAchecker_TMP_1, bw, __CPAchecker_TMP_2, __CPAchecker_TMP_3) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9063: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_agc", "unsupported configuration: %d\n", priv->config) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9045: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_agc", "invoking callback\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9053: Ignoring function call through function pointer *(fe->callback): ret = (*(fe->callback))(priv->i2c_props.adap->algo_data, 0, 0, __CPAchecker_TMP_2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9032: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_agc", "no agc configuration provided\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9101: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_tune", "error %d on line %d\n", ret, 945) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9108: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_tune", "failed to configure agc\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9119: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_tune", "error %d on line %d\n", ret, 949) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7910-7911: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_tracking_filters_correction", "error %d on line %d\n", ret, 305) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7937-7938: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_tracking_filters_correction", "error %d on line %d\n", i, 317) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8820-8821: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c1_rf_tracking_filter_calibration", "error %d on line %d\n", ret, 799) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7692-7693: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_channel_configuration", "error %d on line %d\n", ret, 159) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7212-7213: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_ir_measure", "error %d on line %d\n", ret, 726) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7741-7742: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_channel_configuration", "error %d on line %d\n", ret, 200) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7788-7789: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_channel_configuration", "error %d on line %d\n", ret, 224) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 9369-9370: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_set_analog_params", "error %d on line %d\n", ret, 1080) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9232: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_set_params", "modulation type not supported!\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9240: Ignoring function call through function pointer *(fe->ops.analog_ops.standby): (*(fe->ops.analog_ops.standby))(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9251: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_set_params", "error %d on line %d\n", ret, 1024) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7573-7574: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_toggle_output", "error %d on line %d\n", ret, 87) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7588-7590: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_toggle_output", "%s mode: xtal oscillator %s, slave tuner loop thru %s\n", __CPAchecker_TMP_3, __CPAchecker_TMP_5, __CPAchecker_TMP_7) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                 381704 (count: 95428, min: 0, max: 4, avg: 4.00)
Number of global variables:                          381704 (count: 95428, min: 0, max: 4, avg: 4.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                  111157
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.601s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.329s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 0
Most constraints before refinement in state: 0
Constraints after refinement in state: 0
Constraints before refinement in state: 0
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 578ms

PredicateCPA statistics
-----------------------
Number of abstractions:            111153 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  12464 (11%)
  Because of loop head:            1546 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       111153 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   4
  Times result was 'false':        0 (0%)
Number of coverage checks:         15638
  BDD entailment checks:           15638
Number of SMT sat checks:          4
  trivial:                         4
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          5
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0

Number of path formula cache hits:   77484 (47%)

Time for post operator:                 53.303s
  Time for path formula creation:       52.932s
    Actual computation:                 51.331s
Time for strengthen operator:            0.184s
  Time for satisfiability checks:        0.000s
Time for prec operator:                  5.142s
  Time for abstraction:                  2.506s (Max:     0.080s, Count: 111153)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 0.202s
  Time for BDD entailment checks:        0.148s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 126801, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.184s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.189s
  Time for transition matches:                         0.456s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       170535 (count: 170535, min: 1, max: 1, avg: 1.00) [1 x 170535]

CPA algorithm statistics
------------------------
Number of iterations:            95512
Max size of waitlist:            27
Average size of waitlist:        15
Number of computed successors:   111157
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         15638
Number of times breaked:         4

Total time for CPA algorithm:        69.332s (Max:    67.925s)
  Time for choose from waitlist:      0.205s
  Time for precision adjustment:      7.279s
  Time for transfer relation:        59.678s
  Time for merge operator:            0.059s
  Time for stop operator:             0.639s
  Time for adding to reached set:     0.424s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  84 (count: 4, min: 18, max: 24, avg: 21.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.566s
  Counterexample analysis:                1.536s (Max:     0.404s, Calls: 4)
    Refinement sat check:                 1.401s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.001s
  Building the counterexample trace:                   1.537s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.005s
  ARG update:                                          0.000s

Length of refined path (in blocks):                      68 (count: 4, min: 14, max: 20, avg: 17.00)
Number of affected states:                               48 (count: 4, min: 9, max: 15, avg: 12.00)
Length (states) of path with itp 'true':                 16 (count: 4, min: 4, max: 4, avg: 4.00)
Length (states) of path with itp non-trivial itp:        48 (count: 4, min: 9, max: 15, avg: 12.00)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              44 (count: 4, min: 8, max: 14, avg: 11.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 27
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 24.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:      70.910s
Time for refinements:                 1.577s
Average time for refinement:          0.394s
Max time for refinement:              0.418s

Code Coverage
-----------------------------
  Function coverage:      0.530
  Visited lines:          6666
  Total lines:            7404
  Line coverage:          0.900
  Visited conditions:     692
  Total conditions:       902
  Condition coverage:     0.767

CPAchecker general statistics
-----------------------------
Number of program locations:     2554
Number of CFA edges:             3741
Number of relevant variables:    644
Number of functions:             132
Number of loops:                 15
Size of reached set:             95428
  Number of reached locations:   1840 (72%)
    Avg states per location:     51
    Max states per location:     1931 (at node N397)
  Number of reached functions:   70 (53%)
  Number of partitions:          95428
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.552s
  Time for loading CPAs:          0.614s
  Time for loading parser:        0.544s
  Time for CFA construction:      3.320s
    Time for parsing file(s):     0.836s
    Time for AST to CFA:          1.321s
    Time for CFA sanity check:    0.178s
    Time for post-processing:     0.707s
      Time for var class.:        0.000s
Time for Analysis:               70.910s
CPU time for analysis:           81.280s
Total time for CPAchecker:       75.468s
Total CPU time for CPAchecker:   89.330s

Time for Garbage Collector:       1.473s (in 7 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               3360MB (  3204 MiB) max;   1029MB (   981 MiB) avg;   3418MB (  3260 MiB) peak
Used non-heap memory:             26MB (    24 MiB) max;     24MB (    23 MiB) avg;     26MB (    25 MiB) peak
Used in PS Old Gen pool:          71MB (    67 MiB) max;     21MB (    20 MiB) avg;     71MB (    67 MiB) peak
Allocated heap memory:          4755MB (  4535 MiB) max;   3510MB (  3347 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  13664MB ( 13031 MiB) max;  13596MB ( 12966 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
