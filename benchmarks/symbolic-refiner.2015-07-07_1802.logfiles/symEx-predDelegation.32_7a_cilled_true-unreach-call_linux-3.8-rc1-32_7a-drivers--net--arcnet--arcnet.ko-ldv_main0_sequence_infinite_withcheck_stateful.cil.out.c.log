scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--arcnet--arcnet.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1514067296_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6515: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6517: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6519: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7027: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7022: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7351: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7355: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7225: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7175: Function pointer *(lp->outgoing.proto->continue_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7143: Function pointer *(lp->outgoing.proto->ack_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7086: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7090: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7074: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6355: Function pointer *(lp->hw.reset) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6481: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6487: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6476: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6359: Function pointer *(lp->hw.reset) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7382: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7403: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7398: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6763: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6829: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6796: Function pointer *(proto->continue_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6922: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6926: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6917: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6866: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7519: Function pointer *(lp->hw.copy_to_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7018: Ignoring function call through function pointer *(lp->hw.status): tmp___1 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6706: Ignoring function call through function pointer *(proto->build_header): (*(proto->build_header))(skb, dev, (int)type, (int)daddr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7519: Ignoring function call through function pointer *(lp->hw.copy_to_card): (*(lp->hw.copy_to_card))(dev, bufnum, 0, (void *)(&newpkt), 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6515: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6517: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6519: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6547: Ignoring function call through function pointer *(lp->hw.close): (*(lp->hw.close))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6898: Ignoring function call through function pointer *(lp->hw.status): tmp___0 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from arcnet_timeout to arcnet_close (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6355: Ignoring function call through function pointer *(lp->hw.reset): tmp___2 = (*(lp->hw.reset))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6359: Ignoring function call through function pointer *(lp->hw.reset): tmp___3 = (*(lp->hw.reset))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6443: Ignoring function call through function pointer *(lp->hw.open): (*(lp->hw.open))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from arcnet_open to arcnet_timeout (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6472: Ignoring function call through function pointer *(lp->hw.status): tmp___6 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from arcnet_open to arcnet_close (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from arcnet_open to arcnet_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6476: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6481: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6487: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6917: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_tx) << 3) | 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6922: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6926: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from arcnet_close to arcnet_timeout (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from arcnet_timeout to arcnet_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7022: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7027: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7039: Ignoring function call through function pointer *(lp->hw.status): status = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7074: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_rx) << 3) | 132); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7086: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7090: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7143: Ignoring function call through function pointer *(lp->outgoing.proto->ack_tx): (*(lp->outgoing.proto->ack_tx))(dev, ackstatus); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6866: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_tx) << 3) | 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7175: Ignoring function call through function pointer *(lp->outgoing.proto->continue_tx): tmp___6 = (*(lp->outgoing.proto->continue_tx))(dev, txbuf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7382: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, 0, (void *)(&pkt), 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7403: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, ofs, (void *)soft, length); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7398: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, ofs, (void *)soft, 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7442: Ignoring function call through function pointer *((arc_proto_map[__CPAchecker_TMP_5])->rx): (*((arc_proto_map[__CPAchecker_TMP_5])->rx))(dev, bufnum, &pkt, length); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7225: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 22); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7351: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7355: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_9); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6763: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6775: Ignoring function call through function pointer *(proto->prepare_tx): tmp___3 = (*(proto->prepare_tx))(dev, pkt, __CPAchecker_TMP_3, txbuf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6796: Ignoring function call through function pointer *(proto->continue_tx): tmp___2 = (*(proto->continue_tx))(dev, txbuf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6825: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6829: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_9); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                  18117 (count: 6041, min: 0, max: 3, avg: 3.00)
Number of global variables:                           18117 (count: 6041, min: 0, max: 3, avg: 3.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                   27517
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.333s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.184s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 0
Most constraints before refinement in state: 0
Constraints after refinement in state: 0
Constraints before refinement in state: 0
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 77ms

PredicateCPA statistics
-----------------------
Number of abstractions:            27514 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4896 (18%)
  Because of loop head:            424 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       27514 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   3
  Times result was 'false':        0 (0%)
Number of coverage checks:         3360
  BDD entailment checks:           3360
Number of SMT sat checks:          3
  trivial:                         3
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          4
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0

Number of path formula cache hits:   43336 (87%)

Time for post operator:                  2.700s
  Time for path formula creation:        2.526s
    Actual computation:                  2.236s
Time for strengthen operator:            0.094s
  Time for satisfiability checks:        0.000s
Time for prec operator:                  1.973s
  Time for abstraction:                  0.778s (Max:     0.014s, Count: 27514)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 0.085s
  Time for BDD entailment checks:        0.071s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 30882, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.058s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.362s
Automaton transfers with branching:                0
Automaton transfer successors:                        43025 (count: 43025, min: 1, max: 1, avg: 1.00) [1 x 43025]

CPA algorithm statistics
------------------------
Number of iterations:            24155
Max size of waitlist:            30
Average size of waitlist:        19
Number of computed successors:   27517
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         3360
Number of times breaked:         3

Total time for CPA algorithm:         9.702s (Max:     4.888s)
  Time for choose from waitlist:      0.085s
  Time for precision adjustment:      2.969s
  Time for transfer relation:         5.405s
  Time for merge operator:            0.056s
  Time for stop operator:             0.317s
  Time for adding to reached set:     0.267s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                 108 (count: 3, min: 34, max: 38, avg: 36.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.679s
  Counterexample analysis:                0.263s (Max:     0.112s, Calls: 3)
    Refinement sat check:                 0.228s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.263s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.003s
  Precision update:                                    0.008s
  ARG update:                                          0.000s

Length of refined path (in blocks):                      96 (count: 3, min: 30, max: 34, avg: 32.00)
Number of affected states:                               81 (count: 3, min: 25, max: 29, avg: 27.00)
Length (states) of path with itp 'true':                 12 (count: 3, min: 4, max: 4, avg: 4.00)
Length (states) of path with itp non-trivial itp:        81 (count: 3, min: 25, max: 29, avg: 27.00)
Length (states) of path with itp 'false':                 3 (count: 3, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 3, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              78 (count: 3, min: 24, max: 28, avg: 26.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 6042
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 6040.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:      10.424s
Time for refinements:                 0.720s
Average time for refinement:          0.240s
Max time for refinement:              0.394s

Code Coverage
-----------------------------
  Function coverage:      0.575
  Visited lines:          5836
  Total lines:            6035
  Line coverage:          0.967
  Visited conditions:     329
  Total conditions:       420
  Condition coverage:     0.783

CPAchecker general statistics
-----------------------------
Number of program locations:     1128
Number of CFA edges:             1508
Number of relevant variables:    267
Number of functions:             73
Number of loops:                 7
Size of reached set:             6041
  Number of reached locations:   842 (75%)
    Avg states per location:     7
    Max states per location:     136 (at node N60)
  Number of reached functions:   42 (58%)
  Number of partitions:          6041
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.539s
  Time for loading CPAs:          0.651s
  Time for loading parser:        0.542s
  Time for CFA construction:      2.270s
    Time for parsing file(s):     0.903s
    Time for AST to CFA:          0.752s
    Time for CFA sanity check:    0.083s
    Time for post-processing:     0.379s
      Time for var class.:        0.000s
Time for Analysis:               10.424s
CPU time for analysis:           18.330s
Total time for CPAchecker:       13.970s
Total CPU time for CPAchecker:   24.440s

Time for Garbage Collector:       0.100s (in 1 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                529MB (   504 MiB) max;    267MB (   254 MiB) avg;    571MB (   545 MiB) peak
Used non-heap memory:             24MB (    23 MiB) max;     20MB (    19 MiB) avg;     25MB (    23 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        26MB (    25 MiB) max;     25MB (    23 MiB) avg
Total process virtual memory:  13599MB ( 12969 MiB) max;  13592MB ( 12963 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
