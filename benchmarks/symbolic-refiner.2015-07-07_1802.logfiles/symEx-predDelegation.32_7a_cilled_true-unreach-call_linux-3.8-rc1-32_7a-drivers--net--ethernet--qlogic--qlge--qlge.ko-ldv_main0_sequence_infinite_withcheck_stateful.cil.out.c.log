scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--ethernet--qlogic--qlge--qlge.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-1950797424_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8130: Function pointer *(ops->alloc) with type void * (*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8178: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7861: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7768-7769: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7948: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7993: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7903: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7815: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7903: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7815: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 7768-7769: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, 18446719884453740544UL + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8021: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 18199: Ignoring function call through function pointer *(qdev->nic_ops->get_flash): err = (*(qdev->nic_ops->get_flash))(qdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ql_init_device to qlge_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8130: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8178: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from qlge_open to ql_adapter_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ql_map_send to pci_dma_mapping_error (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7861: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, page, offset, size, dir, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ql_map_send to dma_mapping_error (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ql_update_ring_coalescing to ql_write_cfg (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16432: Ignoring function call through function pointer *(qdev->nic_ops->port_initialize): status = (*(qdev->nic_ops->port_initialize))(qdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ql_adapter_initialize to qlge_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ql_write_cfg to pci_dma_mapping_error (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7993: Ignoring function call through function pointer *(ops->sync_single_for_device): (*(ops->sync_single_for_device))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from dma_mapping_error to qlge_probe (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from qlge_resume to ql_adapter_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ql_adapter_initialize to qlge_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ql_init_device to qlge_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                2818841 (count: 2347244, min: 0, max: 2, avg: 1.20)
Number of global variables:                         2347242 (count: 2347244, min: 0, max: 1, avg: 1.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                 2681722
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                7.164s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     5.202s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 0
Most constraints before refinement in state: 0
Constraints after refinement in state: 0
Constraints before refinement in state: 0
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 5531ms

PredicateCPA statistics
-----------------------
Number of abstractions:            2681720 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  506790 (19%)
  Because of loop head:            66622 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       2681720 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   2
  Times result was 'false':        0 (0%)
Number of coverage checks:         330751
  BDD entailment checks:           330751
Number of SMT sat checks:          2
  trivial:                         2
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          3
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0

Number of path formula cache hits:   951202 (28%)

Time for post operator:                339.867s
  Time for path formula creation:      329.200s
    Actual computation:                287.050s
Time for strengthen operator:           67.903s
  Time for satisfiability checks:        0.000s
Time for prec operator:                 98.638s
  Time for abstraction:                 26.891s (Max:     1.086s, Count: 2681720)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 1.858s
  Time for BDD entailment checks:        1.165s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 3012477, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             3.235s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 19.287s
  Time for transition matches:                         8.030s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      3598723 (count: 3598723, min: 1, max: 1, avg: 1.00) [1 x 3598723]

CPA algorithm statistics
------------------------
Number of iterations:            2350835
Max size of waitlist:            102
Average size of waitlist:        64
Number of computed successors:   2681722
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         330751
Number of times breaked:         2

Total time for CPA algorithm:       701.508s (Max:   698.471s)
  Time for choose from waitlist:      3.327s
  Time for precision adjustment:    129.240s
  Time for transfer relation:       528.746s
  Time for merge operator:            0.766s
  Time for stop operator:             8.105s
  Time for adding to reached set:     8.502s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                 684 (count: 2, min: 302, max: 382, avg: 342.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.522s
  Counterexample analysis:                0.368s (Max:     0.193s, Calls: 2)
    Refinement sat check:                 0.216s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.368s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.012s
  ARG update:                                          0.000s

Length of refined path (in blocks):                     503 (count: 2, min: 125, max: 378, avg: 251.50)
Number of affected states:                              377 (count: 2, min: 4, max: 373, avg: 188.50)
Length (states) of path with itp 'true':                124 (count: 2, min: 4, max: 120, avg: 62.00)
Length (states) of path with itp non-trivial itp:       377 (count: 2, min: 4, max: 373, avg: 188.50)
Length (states) of path with itp 'false':                 2 (count: 2, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             375 (count: 2, min: 3, max: 372, avg: 187.50)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 2071
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 1865.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     702.056s
Time for refinements:                 0.548s
Average time for refinement:          0.274s
Max time for refinement:              0.295s

Code Coverage
-----------------------------
  Function coverage:      0.617
  Visited lines:          11766
  Total lines:            15552
  Line coverage:          0.757
  Visited conditions:     1563
  Total conditions:       2630
  Condition coverage:     0.594

CPAchecker general statistics
-----------------------------
Number of program locations:     7917
Number of CFA edges:             11174
Number of relevant variables:    2488
Number of functions:             415
Number of loops:                 118
Size of reached set:             2347244
  Size of final wait list        73

Time for analysis setup:          7.802s
  Time for loading CPAs:          0.681s
  Time for loading parser:        0.604s
  Time for CFA construction:      6.445s
    Time for parsing file(s):     1.757s
    Time for AST to CFA:          2.101s
    Time for CFA sanity check:    0.349s
    Time for post-processing:     1.933s
      Time for var class.:        0.000s
Time for Analysis:              702.056s
CPU time for analysis:          885.370s
Total time for CPAchecker:      709.863s
Total CPU time for CPAchecker:  899.950s

Time for Garbage Collector:     173.224s (in 52 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               6613MB (  6307 MiB) max;   3520MB (  3357 MiB) avg;   8383MB (  7995 MiB) peak
Used non-heap memory:             28MB (    26 MiB) max;     25MB (    24 MiB) avg;     28MB (    26 MiB) peak
Used in PS Old Gen pool:        4398MB (  4194 MiB) max;   2205MB (  2102 MiB) avg;   4507MB (  4298 MiB) peak
Allocated heap memory:          8912MB (  8500 MiB) max;   5866MB (  5594 MiB) avg
Allocated non-heap memory:        51MB (    49 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:  13599MB ( 12969 MiB) max;  13596MB ( 12966 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
