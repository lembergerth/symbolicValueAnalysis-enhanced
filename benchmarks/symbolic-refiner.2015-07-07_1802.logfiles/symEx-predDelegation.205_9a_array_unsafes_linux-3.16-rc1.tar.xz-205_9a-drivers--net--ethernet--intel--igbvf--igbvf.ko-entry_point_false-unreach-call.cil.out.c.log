scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1819493056_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 11063: Function pointer *(ops->alloc) with type void * (*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11110: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10884: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 10791-10792: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10926: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10838: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14283: Function pointer *(hw->mac.ops.set_vfta) with type s32  (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14316: Function pointer *(hw->mac.ops.set_vfta) with type s32  (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 14655: Ignoring function call through function pointer *(mac->ops.reset_hw): tmp = (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_resume to igbvf_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14603: Ignoring function call through function pointer *(hw->mac.ops.update_mc_addr_list): (*(hw->mac.ops.update_mc_addr_list))(hw, mta_list, (u32 )i, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7843: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14283: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7900: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10884: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, page, offset, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10954: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17012: Ignoring function call through function pointer *(ei->get_variants): err = (*(ei->get_variants))(adapter); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_probe to igbvf_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7935: Ignoring function call through function pointer *(mbx->ops.write_posted): ret_val = (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7939: Ignoring function call through function pointer *(mbx->ops.read_posted): ret_val = (*(mbx->ops.read_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11063: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_open to igbvf_configure (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10838: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10926: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11110: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_open to igbvf_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8000: Ignoring function call through function pointer *(mbx->ops.check_for_rst): tmp = (*(mbx->ops.check_for_rst))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_check_for_link_vf to igbvf_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_check_for_link_vf to e1000_check_for_link_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7703: Ignoring function call through function pointer *(mbx->ops.check_for_rst): tmp = (*(mbx->ops.check_for_rst))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_reset_hw_vf to igbvf_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_reset_hw_vf to e1000_check_for_link_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_reset_hw_vf to e1000_reset_hw_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_close to igbvf_down (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_io_slot_reset to igbvf_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_reinit_locked to igbvf_down (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_reinit_locked to igbvf_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7719: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7723: Ignoring function call through function pointer *(mbx->ops.read_posted): tmp___0 = (*(mbx->ops.read_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8025: Ignoring function call through function pointer *(mbx->ops.read): tmp___1 = (*(mbx->ops.read))(hw, &in_msg, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_check_for_link_vf to e1000_reset_hw_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14841: Ignoring function call through function pointer *(adapter->ei->init_ops): (*(adapter->ei->init_ops))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_io_resume to igbvf_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 15413: Ignoring function call through function pointer *(hw->mac.ops.check_for_link): ret_val = (*(hw->mac.ops.check_for_link))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_has_link to igbvf_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 15495: Ignoring function call through function pointer *(mac->ops.get_link_up_info): (*(mac->ops.get_link_up_info))(&(adapter->hw), &(adapter->link_speed), &(adapter->link_duplex)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_sw_init to igbvf_shutdown (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14843: Ignoring function call through function pointer *(adapter->hw.mac.ops.init_params): rc = (*(adapter->hw.mac.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_sw_init to igbvf_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14852: Ignoring function call through function pointer *(adapter->hw.mbx.ops.init_params): rc = (*(adapter->hw.mbx.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17070: Ignoring function call through function pointer *(hw->mac.ops.reset_hw): err = (*(hw->mac.ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17077: Ignoring function call through function pointer *(hw->mac.ops.read_mac_addr): err = (*(hw->mac.ops.read_mac_addr))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_probe to igbvf_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 10791-10792: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_tx_map_adv to dma_mapping_error (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_set_ringparam to igbvf_down (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_set_ringparam to igbvf_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 15135: Ignoring function call through function pointer *(hw->mac.ops.rar_set): (*(hw->mac.ops.rar_set))(hw, (u8 *)(&(hw->mac.addr)), 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from igbvf_up to igbvf_configure (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_probe to igbvf_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_check_for_link_vf to igbvf_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_reset_hw_vf to igbvf_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_has_link to igbvf_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_sw_init to igbvf_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_probe to e1000_check_for_link_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_has_link to e1000_check_for_link_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_sw_init to e1000_check_for_link_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_probe to e1000_reset_hw_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_has_link to e1000_reset_hw_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_sw_init to e1000_reset_hw_vf (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_resume to igbvf_up (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_probe to igbvf_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_reset_task to igbvf_reinit_locked (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_has_link to igbvf_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from igbvf_sw_init to igbvf_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_reset_hw_vf to igbvf_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_check_for_link_vf to igbvf_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14664: Ignoring function call through function pointer *(mac->ops.init_hw): (*(mac->ops.init_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                      0 (count: 3182542, min: 0, max: 0, avg: 0.00)
Number of global variables:                               0 (count: 3182542, min: 0, max: 0, avg: 0.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                 3599237
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:               64.961s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:    10.556s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 0
Most constraints before refinement in state: 0
Constraints after refinement in state: 0
Constraints before refinement in state: 0
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 6777ms

PredicateCPA statistics
-----------------------
Number of abstractions:            3599237 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  772841 (21%)
  Because of loop head:            30272 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       3599237 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         416696
  BDD entailment checks:           416696
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          0

Number of path formula cache hits:   5210227 (83%)

Time for post operator:                240.132s
  Time for path formula creation:      227.337s
    Actual computation:                156.995s
Time for strengthen operator:            5.010s
Time for prec operator:                200.731s
  Time for abstraction:                 69.295s (Max:    27.820s, Count: 3599237)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 2.099s
  Time for BDD entailment checks:        1.325s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 4015934, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             4.019s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 25.472s
  Time for transition matches:                        10.335s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      5287950 (count: 5287950, min: 1, max: 1, avg: 1.00) [1 x 5287950]

CPA algorithm statistics
------------------------
Number of iterations:            3182468
Max size of waitlist:            100
Average size of waitlist:        73
Number of computed successors:   3599237
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         416696
Number of times breaked:         0

Total time for CPA algorithm:       714.999s (Max:   714.999s)
  Time for choose from waitlist:      4.209s
  Time for precision adjustment:    300.243s
  Time for transfer relation:       365.316s
  Time for merge operator:            0.993s
  Time for stop operator:             9.557s
  Time for adding to reached set:    10.921s

Predicate-Abstraction Refiner statistics
----------------------------------------
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.663
  Visited lines:          10568
  Total lines:            12279
  Line coverage:          0.861
  Visited conditions:     1149
  Total conditions:       1918
  Condition coverage:     0.599

CPAchecker general statistics
-----------------------------
Number of program locations:     5304
Number of CFA edges:             7895
Number of relevant variables:    1658
Number of functions:             320
Number of loops:                 31
Size of reached set:             3182542
  Size of final wait list        74

Time for analysis setup:          6.575s
  Time for loading CPAs:          0.719s
  Time for loading parser:        0.511s
  Time for CFA construction:      5.274s
    Time for parsing file(s):     1.762s
    Time for AST to CFA:          1.555s
    Time for CFA sanity check:    0.232s
    Time for post-processing:     1.434s
      Time for var class.:        0.000s
Time for Analysis:              714.999s
CPU time for analysis:          888.350s
Total time for CPAchecker:      721.580s
Total CPU time for CPAchecker:  900.410s

Time for Garbage Collector:     192.644s (in 51 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               7511MB (  7163 MiB) max;   3706MB (  3534 MiB) avg;  10678MB ( 10183 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     24MB (    23 MiB) avg;     27MB (    26 MiB) peak
Used in PS Old Gen pool:        6212MB (  5924 MiB) max;   2341MB (  2232 MiB) avg;   6587MB (  6282 MiB) peak
Allocated heap memory:          9163MB (  8739 MiB) max;   6025MB (  5745 MiB) avg
Allocated non-heap memory:        50MB (    48 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:  13597MB ( 12967 MiB) max;  13596MB ( 12967 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
