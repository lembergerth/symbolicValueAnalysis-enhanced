scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_generic.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_2085254927_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 11053-11054: Function pointer *(ppp->xcomp->compress) with type int (*)(void *, unsigned char *, unsigned char *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8870: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 13457-13458: Function pointer *(ppp->xcomp->comp_init) with type int (*)(void *, unsigned char *, int, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 13437-13438: Function pointer *(ppp->rcomp->decomp_init) with type int (*)(void *, unsigned char *, int, int, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12430: Function pointer *(ppp->rcomp->incomp) with type void (*)(void *, unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12398-12399: Function pointer *(ppp->rcomp->decompress) with type int (*)(void *, unsigned char *, int, unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9891: Function pointer *(chan->ops->ioctl) with type int (*)(struct ppp_channel *, unsigned int, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13316: Function pointer *(cp->decomp_alloc) with type void * (*)(unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13282: Function pointer *(cp->comp_alloc) with type void * (*)(unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7767: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7804: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 13316: Ignoring function call through function pointer *(cp->decomp_alloc): state = (*(cp->decomp_alloc))((unsigned char *)(&ccp_option), (int)(data.length)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13336: Ignoring function call through function pointer *(ocomp->decomp_free): (*(ocomp->decomp_free))(ostate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11819: Ignoring function call through function pointer *(pch->chan->ops->start_xmit): tmp = (*(pch->chan->ops->start_xmit))(pch->chan, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13542: Ignoring function call through function pointer *(xcomp->comp_free): (*(xcomp->comp_free))(xstate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_ccp_closed to ppp_output_wakeup (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_disconnect_channel to ppp_destroy_interface (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13551: Ignoring function call through function pointer *(rcomp->decomp_free): (*(rcomp->decomp_free))(rstate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11747: Ignoring function call through function pointer *(chan->ops->start_xmit): tmp___1 = (*(chan->ops->start_xmit))(chan, frag); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11747: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type int: tmp___1 = ppp_start_xmit(chan, frag); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_mp_explode to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8870: Ignoring function call through function pointer *(p->_qproc): (*(p->_qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11343: Ignoring function call through function pointer *(pch->chan->ops->start_xmit): tmp___0 = (*(pch->chan->ops->start_xmit))(pch->chan, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11343: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type int: tmp___0 = ppp_start_xmit(pch->chan, skb); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_push to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 11120: Ignoring function call through function pointer *(ppp->pass_filter->bpf_func): tmp___1 = (*(ppp->pass_filter->bpf_func))((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->pass_filter->ldv_41788.insnsi))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11120: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type unsigned int: tmp___1 = ppp_start_xmit((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->pass_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_send_frame to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 11146-11147: Ignoring function call through function pointer *(ppp->active_filter->bpf_func): tmp___2 = (*(ppp->active_filter->bpf_func))((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->active_filter->ldv_41788.insnsi))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11146-11147: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type unsigned int: tmp___2 = ppp_start_xmit((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->active_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 13492: Ignoring function call through function pointer *(ppp->xcomp->comp_reset): (*(ppp->xcomp->comp_reset))(ppp->xc_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_ccp_peek to ppp_output_wakeup (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_ccp_closed to ppp_unregister_channel (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13482: Ignoring function call through function pointer *(ppp->rcomp->decomp_reset): (*(ppp->rcomp->decomp_reset))(ppp->rc_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 13457-13458: Ignoring function call through function pointer *(ppp->xcomp->comp_init): tmp___2 = (*(ppp->xcomp->comp_init))(ppp->xc_state, dp, len, ppp->file.index, 0, ppp->debug); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 13437-13438: Ignoring function call through function pointer *(ppp->rcomp->decomp_init): tmp___1 = (*(ppp->rcomp->decomp_init))(ppp->rc_state, dp, len, ppp->file.index, 0, ppp->mru, ppp->debug); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11053-11054: Ignoring function call through function pointer *(ppp->xcomp->compress): len = (*(ppp->xcomp->compress))(ppp->xc_state, (skb->data) + 18446744073709551614UL, new_skb->data, (int)((skb->len) + 2U), compressor_skb_size); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_start_xmit to ppp_xmit_process (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_release to ppp_destroy_interface (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_ccp_peek to ppp_unregister_channel (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13282: Ignoring function call through function pointer *(cp->comp_alloc): state = (*(cp->comp_alloc))((unsigned char *)(&ccp_option), (int)(data.length)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13302: Ignoring function call through function pointer *(ocomp->comp_free): (*(ocomp->comp_free))(ostate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_destroy_interface to ppp_ccp_closed (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9891: Ignoring function call through function pointer *(chan->ops->ioctl): err = (*(chan->ops->ioctl))(chan, cmd, arg); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_unregister_channel to ppp_disconnect_channel (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_channel_push to ppp_release (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_mp_explode to ppp_release (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_push to ppp_release (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 11120: Return type of function ppp_release is int, but result is used as type unsigned int: tmp___1 = ppp_release((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->pass_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_send_frame to ppp_release (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 11146-11147: Return type of function ppp_release is int, but result is used as type unsigned int: tmp___2 = ppp_release((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->active_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_output_wakeup to ppp_channel_push (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_channel_push to ppp_xmit_process (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                2214444 (count: 1107224, min: 0, max: 2, avg: 2.00)
Number of global variables:                         2214444 (count: 1107224, min: 0, max: 2, avg: 2.00)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                 1924507
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                4.997s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     3.721s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 1
Most constraints before refinement in state: 1
Constraints after refinement in state: 1
Constraints before refinement in state: 3
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 2724ms

PredicateCPA statistics
-----------------------
Number of abstractions:            1924505 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  384979 (20%)
  Because of loop head:            17266 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1924505 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   2
  Times result was 'false':        0 (0%)
Number of coverage checks:         201464
  BDD entailment checks:           201464
Number of SMT sat checks:          2
  trivial:                         2
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          6
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0

Number of path formula cache hits:   2011265 (65%)

Time for post operator:                536.961s
  Time for path formula creation:      532.492s
    Actual computation:                479.062s
Time for strengthen operator:            2.557s
  Time for satisfiability checks:        0.000s
Time for prec operator:                101.031s
  Time for abstraction:                 32.419s (Max:    14.440s, Count: 1924505)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 1.230s
  Time for BDD entailment checks:        0.775s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 2125978, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             2.203s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.487s
  Time for transition matches:                         5.697s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      2647925 (count: 2647925, min: 1, max: 1, avg: 1.00) [1 x 2647925]

CPA algorithm statistics
------------------------
Number of iterations:            1718332
Max size of waitlist:            4709
Average size of waitlist:        1540
Number of computed successors:   1924507
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         201464
Number of times breaked:         2

Total time for CPA algorithm:       801.752s (Max:   705.835s)
  Time for choose from waitlist:      2.427s
  Time for precision adjustment:    122.154s
  Time for transfer relation:       630.925s
  Time for merge operator:           10.446s
  Time for stop operator:            16.189s
  Time for adding to reached set:     6.307s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                 423 (count: 2, min: 201, max: 222, avg: 211.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.656s
  Counterexample analysis:                0.339s (Max:     0.180s, Calls: 2)
    Refinement sat check:                 0.213s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.339s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.004s
  ARG update:                                          0.000s

Length of refined path (in blocks):                     405 (count: 2, min: 187, max: 218, avg: 202.50)
Number of affected states:                              111 (count: 2, min: 2, max: 109, avg: 55.50)
Length (states) of path with itp 'true':                292 (count: 2, min: 108, max: 184, avg: 146.00)
Length (states) of path with itp non-trivial itp:       111 (count: 2, min: 2, max: 109, avg: 55.50)
Length (states) of path with itp 'false':                 2 (count: 2, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 2, min: 1, max: 2, avg: 1.50)
Equal non-trivial interpolants along paths:             106 (count: 2, min: 0, max: 106, avg: 53.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 307913
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 307911.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     806.676s
Time for refinements:                 4.923s
Average time for refinement:          2.461s
Max time for refinement:              3.201s

Code Coverage
-----------------------------
  Function coverage:      0.406
  Visited lines:          8329
  Total lines:            10717
  Line coverage:          0.777
  Visited conditions:     456
  Total conditions:       1162
  Condition coverage:     0.392

CPAchecker general statistics
-----------------------------
Number of program locations:     3423
Number of CFA edges:             4845
Number of relevant variables:    999
Number of functions:             229
Number of loops:                 24
Size of reached set:             1107224
  Size of final wait list        4705

Time for analysis setup:          6.196s
  Time for loading CPAs:          0.685s
  Time for loading parser:        0.558s
  Time for CFA construction:      4.876s
    Time for parsing file(s):     1.448s
    Time for AST to CFA:          2.201s
    Time for CFA sanity check:    0.151s
    Time for post-processing:     0.887s
      Time for var class.:        0.000s
Time for Analysis:              806.677s
CPU time for analysis:          888.600s
Total time for CPAchecker:      812.878s
Total CPU time for CPAchecker:  900.280s

Time for Garbage Collector:      66.959s (in 34 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               4121MB (  3930 MiB) max;   2556MB (  2438 MiB) avg;   5860MB (  5588 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     25MB (    24 MiB) avg;     27MB (    26 MiB) peak
Used in PS Old Gen pool:        2200MB (  2098 MiB) max;   1087MB (  1036 MiB) avg;   2247MB (  2143 MiB) peak
Allocated heap memory:          6066MB (  5785 MiB) max;   4622MB (  4408 MiB) avg
Allocated non-heap memory:        51MB (    49 MiB) max;     40MB (    39 MiB) avg
Total process virtual memory:  13685MB ( 13051 MiB) max;  13627MB ( 12996 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
