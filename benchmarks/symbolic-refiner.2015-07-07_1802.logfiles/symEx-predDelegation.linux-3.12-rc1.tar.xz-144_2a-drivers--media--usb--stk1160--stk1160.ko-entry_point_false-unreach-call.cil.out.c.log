scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -valueAnalysis-symbolic-refiner-pred -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.12-rc1/ALL.prp ../svcomp15/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--media--usb--stk1160--stk1160.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_231242128_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7060: Function pointer *(__sd->ops->video->s_routing) with type int (*)(struct v4l2_subdev *, u32 , u32 , u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7060: Ignoring function call through function pointer *(__sd->ops->video->s_routing): (*(__sd->ops->video->s_routing))(__sd, (u32 )route, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8877: Ignoring function call through function pointer *(__sd->ops->video->querystd): (*(__sd->ops->video->querystd))(__sd, norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9480: Ignoring function call through function pointer *(__sd->ops->core->s_std): (*(__sd->ops->core->s_std))(__sd, dev->norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from stk1160_video_register to stk1160_probe (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7540: Ignoring function call through function pointer *(__sd___0->ops->video->s_stream): (*(__sd___0->ops->video->s_stream))(__sd___0, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8580: Ignoring function call through function pointer *(__sd->ops->video->s_stream): (*(__sd->ops->video->s_stream))(__sd, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from stk1160_start_streaming to start_streaming (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12879: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12879: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ldv_usb_submit_urb_12 to ldv_submit_urb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12888: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12888: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7513: Ignoring function call through function pointer *(__sd->ops->core->reset): (*(__sd->ops->core->reset))(__sd, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8990: Ignoring function call through function pointer *(__sd->ops->core->s_std): (*(__sd->ops->core->s_std))(__sd, dev->norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___0 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___10 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___11 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___12 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___13 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___14 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___16 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___17 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___18 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___2 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___20 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___21 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___22 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___23 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___25 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___27 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___28 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___3 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___5 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___8 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

line 8656: Ignoring function call through function pointer *(__sd->ops->video->s_stream): (*(__sd->ops->video->s_stream))(__sd, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Error: Refinement using predicate refinement failed.Try using cpa.value.symbolic.refiner.SymbolicValueAnalysisRefiner (SymbolicPrecisionRefinementStrategy.performRefinement, SEVERE)

ValueAnalysisCPA statistics
---------------------------
Number of variables:                                 447976 (count: 53496, min: 0, max: 11, avg: 8.37)
Number of global variables:                          444840 (count: 53496, min: 0, max: 9, avg: 8.32)

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                  624429
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                3.259s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     1.658s
Replaced symbolic expressions: 0

ConstraintsPrecisionAdjustment statistics
-----------------------------------------
Most constraints after refinement in state: 1
Most constraints before refinement in state: 1
Constraints after refinement in state: 156
Constraints before refinement in state: 168
Average time for constraints adjustment: 0ms
Complete time for constraints adjustment: 1054ms

PredicateCPA statistics
-----------------------
Number of abstractions:            624416 (100% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  98352 (16%)
  Because of loop head:            16804 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       624416 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   13
  Times result was 'false':        0 (0%)
Number of coverage checks:         77974
  BDD entailment checks:           77974
Number of SMT sat checks:          13
  trivial:                         13
  cached:                          0

Max ABE block size:                       1
Number of predicates discovered:          15
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0

Number of path formula cache hits:   1026166 (89%)

Time for post operator:                 46.911s
  Time for path formula creation:       45.142s
    Actual computation:                 37.234s
Time for strengthen operator:            1.066s
  Time for satisfiability checks:        0.000s
Time for prec operator:                 22.312s
  Time for abstraction:                  7.953s (Max:     0.103s, Count: 624416)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.000s
Time for coverage check:                 0.581s
  Time for BDD entailment checks:        0.373s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 702419, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.960s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.415s
  Time for transition matches:                         2.651s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       981134 (count: 981134, min: 1, max: 1, avg: 1.00) [1 x 981134]

CPA algorithm statistics
------------------------
Number of iterations:            546335
Max size of waitlist:            64
Average size of waitlist:        37
Number of computed successors:   624429
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         77974
Number of times breaked:         13

Total time for CPA algorithm:       115.519s (Max:    17.024s)
  Time for choose from waitlist:      0.932s
  Time for precision adjustment:     31.210s
  Time for transfer relation:        72.766s
  Time for merge operator:            0.291s
  Time for stop operator:             2.523s
  Time for adding to reached set:     2.172s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                6709 (count: 13, min: 67, max: 1042, avg: 516.08)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.848s
  Counterexample analysis:               12.829s (Max:     2.193s, Calls: 13)
    Refinement sat check:                 8.478s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.006s
  Building the counterexample trace:                  12.829s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.012s
  ARG update:                                          0.000s

Length of refined path (in blocks):                    2376 (count: 12, min: 21, max: 705, avg: 198.00)
Number of affected states:                              363 (count: 12, min: 2, max: 69, avg: 30.25)
Length (states) of path with itp 'true':               2001 (count: 12, min: 1, max: 701, avg: 166.75)
Length (states) of path with itp non-trivial itp:       363 (count: 12, min: 2, max: 69, avg: 30.25)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           2 (count: 12, min: 0, max: 2, avg: 0.17)
Equal non-trivial interpolants along paths:             349 (count: 12, min: 0, max: 68, avg: 29.08)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 61358
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 42036.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     131.207s
Time for refinements:                15.687s
Average time for refinement:          1.206s
Max time for refinement:              2.436s

Code Coverage
-----------------------------
  Function coverage:      0.908
  Visited lines:          9123
  Total lines:            9199
  Line coverage:          0.992
  Visited conditions:     667
  Total conditions:       736
  Condition coverage:     0.906

CPAchecker general statistics
-----------------------------
Number of program locations:     2171
Number of CFA edges:             2963
Number of relevant variables:    668
Number of functions:             131
Number of loops:                 26
Size of reached set:             53496
  Number of reached locations:   2018 (93%)
    Avg states per location:     26
    Max states per location:     401 (at node N14)
  Number of reached functions:   119 (91%)
  Number of partitions:          51502
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N686 (before lines 7931-7933), Function main called from node N531, stack depth 1 [5f5bfbc9], stack [main], Init])
  Number of target states:       1
  Size of final wait list        11

Time for analysis setup:          4.792s
  Time for loading CPAs:          0.621s
  Time for loading parser:        0.622s
  Time for CFA construction:      3.457s
    Time for parsing file(s):     1.287s
    Time for AST to CFA:          1.092s
    Time for CFA sanity check:    0.121s
    Time for post-processing:     0.695s
      Time for var class.:        0.000s
Time for Analysis:              131.207s
CPU time for analysis:          149.010s
Total time for CPAchecker:      136.004s
Total CPU time for CPAchecker:  157.520s

Time for Garbage Collector:       2.343s (in 9 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               3423MB (  3264 MiB) max;   1338MB (  1276 MiB) avg;   3513MB (  3351 MiB) peak
Used non-heap memory:             27MB (    26 MiB) max;     26MB (    25 MiB) avg;     28MB (    27 MiB) peak
Used in PS Old Gen pool:         230MB (   220 MiB) max;     85MB (    81 MiB) avg;    230MB (   220 MiB) peak
Allocated heap memory:          4725MB (  4507 MiB) max;   3851MB (  3673 MiB) avg
Allocated non-heap memory:        29MB (    27 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:  13970MB ( 13323 MiB) max;  13625MB ( 12994 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
