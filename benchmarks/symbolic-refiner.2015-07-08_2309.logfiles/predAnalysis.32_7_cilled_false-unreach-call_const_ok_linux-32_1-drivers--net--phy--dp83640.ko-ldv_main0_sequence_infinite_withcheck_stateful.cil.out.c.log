scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.4-simple/ALL.prp ../svcomp15/ldv-linux-3.4-simple/32_7_cilled_false-unreach-call_const_ok_linux-32_1-drivers--net--phy--dp83640.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-219161308_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 6055: Return type of function __builtin_object_size is void, but result is used as type int: tmp___7 = __builtin_object_size(to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Inconsistent replayed error path! (PredicateCPA:PredicateCPARefiner.findPreciseErrorPath, WARNING)

The satisfying assignment may be imprecise! (PredicateCPA:PredicateCPARefiner.performRefinement, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            22 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            22 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       9 (41%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      13 (59%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   5
  Times result was 'false':        3 (60%)
Number of coverage checks:         323
  BDD entailment checks:           11
Number of SMT sat checks:          5
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          2
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         26
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 2.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   26 (100%)
  Total number of models for allsat:      15
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.15

Number of path formula cache hits:   629 (21%)

Time for post operator:                  0.636s
  Time for path formula creation:        0.620s
    Actual computation:                  0.652s
Time for strengthen operator:            0.838s
  Time for satisfiability checks:        0.829s
Time for prec operator:                  1.096s
  Time for abstraction:                  1.089s (Max:     0.281s, Count: 22)
    Boolean abstraction:                 0.904s
    Solving time:                        0.883s (Max:     0.250s)
    Model enumeration time:              0.012s
    Time for BDD construction:           0.003s (Max:     0.001s)
Time for merge operator:                 0.165s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.008s
Total time for SMT solver (w/o itp):     1.724s

Number of BDD nodes:                               205
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 83, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.077s
Automaton transfers with branching:                0
Automaton transfer successors:                         6804 (count: 6804, min: 1, max: 1, avg: 1.00) [1 x 6804]

CPA algorithm statistics
------------------------
Number of iterations:            1514
Max size of waitlist:            23
Average size of waitlist:        10
Number of computed successors:   1701
Max successors for one state:    2
Number of times merged:          156
Number of times stopped:         167
Number of times breaked:         2

Total time for CPA algorithm:         3.091s (Max:     2.075s)
  Time for choose from waitlist:      0.016s
  Time for precision adjustment:      1.141s
  Time for transfer relation:         1.657s
  Time for merge operator:            0.183s
  Time for stop operator:             0.027s
  Time for adding to reached set:     0.026s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   7 (count: 2, min: 2, max: 5, avg: 3.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.761s
  Counterexample analysis:                0.628s (Max:     0.515s, Calls: 2)
    Refinement sat check:                 0.403s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.111s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.628s
  Extracting precise counterexample:                   0.111s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 1033
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 768.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:       3.872s
Time for refinements:                 0.781s
Average time for refinement:          0.390s
Max time for refinement:              0.636s

Code Coverage
-----------------------------
  Function coverage:      0.526
  Visited lines:          6611
  Total lines:            9544
  Line coverage:          0.693
  Visited conditions:     178
  Total conditions:       292
  Condition coverage:     0.610

CPAchecker general statistics
-----------------------------
Number of program locations:     1333
Number of CFA edges:             1798
Number of relevant variables:    1732
Number of functions:             78
Number of loops:                 16
Size of reached set:             1033
  Number of reached locations:   629 (47%)
    Avg states per location:     1
    Max states per location:     20 (at node N386)
  Number of reached functions:   41 (53%)
  Number of partitions:          1033
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       1
  Size of final wait list        11

Time for analysis setup:          5.896s
  Time for loading CPAs:          0.596s
  Time for loading parser:        0.648s
  Time for CFA construction:      4.588s
    Time for parsing file(s):     1.338s
    Time for AST to CFA:          1.394s
    Time for CFA sanity check:    0.312s
    Time for post-processing:     1.274s
      Time for var class.:        0.000s
Time for Analysis:                3.872s
CPU time for analysis:            4.940s
Total time for CPAchecker:        9.773s
Total CPU time for CPAchecker:   16.040s

Time for Garbage Collector:       0.000s (in 0 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                307MB (   292 MiB) max;    207MB (   197 MiB) avg;    317MB (   302 MiB) peak
Used non-heap memory:             22MB (    21 MiB) max;     17MB (    16 MiB) avg;     22MB (    21 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        25MB (    24 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:  13694MB ( 13060 MiB) max;  13600MB ( 12970 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 13678) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
