scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--sja1000--sja1000.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1186611727_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6955: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6957: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6959: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6961: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6963: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6965: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6967: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6971: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6973: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6766: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6797: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6802: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6794: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6784: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6781: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6710: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6714: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6730: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6734: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7440: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7444: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7425: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7328: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6932: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6936: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7517: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7629: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7529: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7584: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7561: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7123: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7144: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7146: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7171: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7129: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7131: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7133: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7135: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6911: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6913: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6838: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6840: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6842: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7043: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7045: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7047: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7059: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7030: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7032: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7034: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7036: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7038: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6642: Function pointer *(priv->write_reg) with type void (*)(const struct sja1000_priv *, int, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6644: Function pointer *(priv->read_reg) with type u8  (*)(const struct sja1000_priv *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7043: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 16, (int)fi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7045: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 17, (int)((u8 )((id & 2040U) >> 3))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7047: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 18, ((int)((u8 )id)) << 5U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7030: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 16, (int)fi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7032: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 17, (int)((u8 )((id & 534773760U) >> 21))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7034: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 18, (int)((u8 )((id & 2088960U) >> 13))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7036: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 19, (int)((u8 )((id & 8160U) >> 5))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7038: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 20, ((int)((u8 )id)) << 3U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6642: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 1, (int)val); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6644: Ignoring function call through function pointer *(priv->read_reg): (*(priv->read_reg))((const struct sja1000_priv *)priv, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7059: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, (int)tmp___1, (int)((cf->data)[i])); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6710: Ignoring function call through function pointer *(priv->read_reg): tmp___0 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6714: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 4, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6730: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 0, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6734: Ignoring function call through function pointer *(priv->read_reg): status = (*(priv->read_reg))((const struct sja1000_priv *)priv, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6838: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 15, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6840: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 14, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6842: Ignoring function call through function pointer *(priv->read_reg): (*(priv->read_reg))((const struct sja1000_priv *)priv, 12); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6766: Ignoring function call through function pointer *(priv->read_reg): tmp___0 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6797: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 0, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6794: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 0, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6802: Ignoring function call through function pointer *(priv->read_reg): status = (*(priv->read_reg))((const struct sja1000_priv *)priv, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6784: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 4, 127); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6781: Ignoring function call through function pointer *(priv->write_reg): (*(priv->write_reg))((const struct sja1000_priv *)priv, 4, 255); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7512: Ignoring function call through function pointer *(priv->pre_irq): (*(priv->pre_irq))((const struct sja1000_priv *)priv); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7517: Ignoring function call through function pointer *(priv->read_reg): tmp___0 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7629: Ignoring function call through function pointer *(priv->read_reg): isrc = (*(priv->read_reg))((const struct sja1000_priv *)priv, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7529: Ignoring function call through function pointer *(priv->read_reg): status = (*(priv->read_reg))((const struct sja1000_priv *)priv, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6658: Ignoring function call through function pointer *(priv->read_reg): tmp = (*(priv->read_reg))((const struct sja1000_priv *)priv, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7123: Ignoring function call through function pointer *(priv->read_reg): fi = (*(priv->read_reg))((const struct sja1000_priv *)priv, 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7144: Ignoring function call through function pointer *(priv->read_reg): tmp___4 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 17); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7146: Ignoring function call through function pointer *(priv->read_reg): tmp___5 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 18); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7129: Ignoring function call through function pointer *(priv->read_reg): tmp___0 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 17); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7131: Ignoring function call through function pointer *(priv->read_reg): tmp___1 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 18); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7133: Ignoring function call through function pointer *(priv->read_reg): tmp___2 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 19); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7135: Ignoring function call through function pointer *(priv->read_reg): tmp___3 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 20); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7171: Ignoring function call through function pointer *(priv->read_reg): (cf->data)[i] = (*(priv->read_reg))((const struct sja1000_priv *)priv, (int)tmp___6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7584: Ignoring function call through function pointer *(priv->read_reg): status = (*(priv->read_reg))((const struct sja1000_priv *)priv, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7328: Ignoring function call through function pointer *(priv->read_reg): ecc = (*(priv->read_reg))((const struct sja1000_priv *)priv, 12); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7425: Ignoring function call through function pointer *(priv->read_reg): alc = (*(priv->read_reg))((const struct sja1000_priv *)priv, 11); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7440: Ignoring function call through function pointer *(priv->read_reg): tmp___4 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7444: Ignoring function call through function pointer *(priv->read_reg): tmp___5 = (*(priv->read_reg))((const struct sja1000_priv *)priv, 15); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7642: Ignoring function call through function pointer *(priv->post_irq): (*(priv->post_irq))((const struct sja1000_priv *)priv); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            7028 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            7028 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1722 (25%)
  Times precision was {false}:     328 (5%)
  Times result was cached:         4466 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      512 (7%)
  Times result was 'false':        844 (12%)
Number of strengthen sat checks:   49
  Times result was 'false':        34 (69%)
Number of coverage checks:         44504
  BDD entailment checks:           5232
Number of SMT sat checks:          49
  trivial:                         0
  cached:                          13

Max ABE block size:                       102
Number of predicates discovered:          13
Number of abstraction locations:          10
Max number of predicates per location:    9
Avg number of predicates per location:    2
Total predicates per abstraction:         1757
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 2.09
Number of irrelevant predicates:          998 (57%)
Number of preds handled by boolean abs:   759 (43%)
  Total number of models for allsat:      1052
  Max number of models for allsat:        128
  Avg number of models for allsat:        2.05

Number of path formula cache hits:   199330 (75%)

Time for post operator:                  9.048s
  Time for path formula creation:        8.530s
    Actual computation:                  7.126s
Time for strengthen operator:            0.854s
  Time for satisfiability checks:        0.559s
Time for prec operator:                 35.717s
  Time for abstraction:                 35.256s (Max:     3.995s, Count: 7028)
    Boolean abstraction:                21.596s
    Solving time:                       20.564s (Max:     0.200s)
    Model enumeration time:              9.905s
    Time for BDD construction:           0.098s (Max:     0.018s)
Time for merge operator:                 1.431s
Time for coverage check:                 0.105s
  Time for BDD entailment checks:        0.068s
Total time for SMT solver (w/o itp):    31.028s

Number of BDD nodes:                               3095
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         580 (count: 10296, min: 0, max: 450, avg: 0.06)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.460s
  Time for transition matches:                         0.613s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       338521 (count: 338521, min: 1, max: 1, avg: 1.00) [1 x 338521]

CPA algorithm statistics
------------------------
Number of iterations:            218926
Max size of waitlist:            370
Average size of waitlist:        130
Number of computed successors:   245252
Max successors for one state:    2
Number of times merged:          19636
Number of times stopped:         23292
Number of times breaked:         15

Total time for CPA algorithm:        54.474s (Max:    13.015s)
  Time for choose from waitlist:      0.247s
  Time for precision adjustment:     36.394s
  Time for transfer relation:        13.532s
  Time for merge operator:            1.773s
  Time for stop operator:             0.537s
  Time for adding to reached set:     0.612s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  92 (count: 15, min: 2, max: 10, avg: 6.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.848s
  Counterexample analysis:                2.198s (Max:     0.387s, Calls: 15)
    Refinement sat check:                 1.860s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   2.199s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.005s
  ARG update:                                          0.594s

Length of refined path (in blocks):                      48 (count: 14, min: 2, max: 8, avg: 3.43)
Number of affected states:                               34 (count: 14, min: 1, max: 7, avg: 2.43)
Length (states) of path with itp 'true':                  0 (count: 14, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        34 (count: 14, min: 1, max: 7, avg: 2.43)
Length (states) of path with itp 'false':                10 (count: 14, min: 0, max: 1, avg: 0.71)
Different non-trivial interpolants along paths:           3 (count: 14, min: 0, max: 1, avg: 0.21)
Equal non-trivial interpolants along paths:              17 (count: 14, min: 0, max: 5, avg: 1.21)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                15
Number of successful refinements:     15
Number of failed refinements:         0
Max. size of reached set before ref.: 28825
Max. size of reached set after ref.:  26
Avg. size of reached set before ref.: 13437.13
Avg. size of reached set after ref.:  24.33

Total time for CEGAR algorithm:      57.439s
Time for refinements:                 2.963s
Average time for refinement:          0.197s
Max time for refinement:              0.511s

Code Coverage
-----------------------------
  Function coverage:      0.639
  Visited lines:          6200
  Total lines:            6458
  Line coverage:          0.960
  Visited conditions:     263
  Total conditions:       306
  Condition coverage:     0.859

CPAchecker general statistics
-----------------------------
Number of program locations:     1029
Number of CFA edges:             1332
Number of relevant variables:    292
Number of functions:             83
Number of loops:                 10
Size of reached set:             19925
  Number of reached locations:   788 (77%)
    Avg states per location:     25
    Max states per location:     330 (at node N87)
  Number of reached functions:   53 (64%)
  Number of partitions:          19920
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1140 (before line 8226), Function main called from node N1122, stack depth 1 [eeb49a6], stack [main], Init])
  Number of target states:       0

Time for analysis setup:          3.392s
  Time for loading CPAs:          0.536s
  Time for loading parser:        0.527s
  Time for CFA construction:      2.265s
    Time for parsing file(s):     0.801s
    Time for AST to CFA:          0.698s
    Time for CFA sanity check:    0.088s
    Time for post-processing:     0.373s
      Time for var class.:        0.000s
Time for Analysis:               57.439s
CPU time for analysis:           68.150s
Total time for CPAchecker:       60.837s
Total CPU time for CPAchecker:   74.040s

Time for Garbage Collector:       0.396s (in 3 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               1094MB (  1044 MiB) max;    421MB (   402 MiB) avg;   1116MB (  1064 MiB) peak
Used non-heap memory:             24MB (    23 MiB) max;     23MB (    22 MiB) avg;     25MB (    23 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2553MB (  2435 MiB) max;   2351MB (  2242 MiB) avg
Allocated non-heap memory:        26MB (    25 MiB) max;     26MB (    24 MiB) avg
Total process virtual memory:  13664MB ( 13031 MiB) max;  13596MB ( 12966 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
