scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--tuners--tda18271.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_776230420_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 9053: Function pointer *(fe->callback) with type int (*)(void *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5818: Function pointer *(fe->ops.i2c_gate_ctrl) with type int (*)(struct dvb_frontend *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5807: Function pointer *(fe->ops.analog_ops.i2c_gate_ctrl) with type int (*)(struct dvb_frontend *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9240: Function pointer *(fe->ops.analog_ops.standby) with type void (*)(struct dvb_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

lines 6885-6886: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_standby_mode", "sm = %d, sm_lt = %d, sm_xt = %d\n", sm, sm_lt, sm_xt) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7293: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

lines 6462-6463: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "__tda18271_write_regs", "ERROR: idx = 0x%x, len = %d, i2c_transfer returned: %d\n", idx, max, ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8951: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 871) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6217-6218: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_read_regs", "ERROR: i2c_transfer returned: %d\n", ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5849: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "=== TDA18271 REG DUMP ===\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5856-5857: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "ID_BYTE            = 0x%02x\n", (int)(*regs)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5864-5865: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "THERMO_BYTE        = 0x%02x\n", (int)(*(regs + 1UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5872-5873: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "POWER_LEVEL_BYTE   = 0x%02x\n", (int)(*(regs + 2UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5880-5881: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_1   = 0x%02x\n", (int)(*(regs + 3UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5888-5889: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_2   = 0x%02x\n", (int)(*(regs + 4UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5896-5897: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_3   = 0x%02x\n", (int)(*(regs + 5UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5904-5905: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_4   = 0x%02x\n", (int)(*(regs + 6UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5912-5913: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_5   = 0x%02x\n", (int)(*(regs + 7UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5920-5921: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_POST_DIV_BYTE  = 0x%02x\n", (int)(*(regs + 8UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5928-5929: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_1     = 0x%02x\n", (int)(*(regs + 9UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5936-5937: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_2     = 0x%02x\n", (int)(*(regs + 10UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5944-5945: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_3     = 0x%02x\n", (int)(*(regs + 11UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5952-5953: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_POST_DIV_BYTE = 0x%02x\n", (int)(*(regs + 12UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5960-5961: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_1    = 0x%02x\n", (int)(*(regs + 13UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5968-5969: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_2    = 0x%02x\n", (int)(*(regs + 14UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5976-5977: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_3    = 0x%02x\n", (int)(*(regs + 15UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5991-5992: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_1    = 0x%02x\n", (int)(*(regs + 16UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5999-6000: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_2    = 0x%02x\n", (int)(*(regs + 17UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6007-6008: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_3    = 0x%02x\n", (int)(*(regs + 18UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6015-6016: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_4    = 0x%02x\n", (int)(*(regs + 19UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6023-6024: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_5    = 0x%02x\n", (int)(*(regs + 20UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6031-6032: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_6    = 0x%02x\n", (int)(*(regs + 21UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6039-6040: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_7    = 0x%02x\n", (int)(*(regs + 22UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6047-6048: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_8    = 0x%02x\n", (int)(*(regs + 23UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6055-6056: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_9  W = 0x%02x\n", (int)(*(regs + 24UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6063-6064: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_10   = 0x%02x\n", (int)(*(regs + 25UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6071-6072: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_11   = 0x%02x\n", (int)(*(regs + 26UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6079-6080: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_12   = 0x%02x\n", (int)(*(regs + 27UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6087-6088: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_13   = 0x%02x\n", (int)(*(regs + 28UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6095-6096: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_14   = 0x%02x\n", (int)(*(regs + 29UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6103-6104: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_15   = 0x%02x\n", (int)(*(regs + 30UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6111-6112: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_16 W = 0x%02x\n", (int)(*(regs + 31UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6119-6120: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_17 W = 0x%02x\n", (int)(*(regs + 32UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6127-6128: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_18   = 0x%02x\n", (int)(*(regs + 33UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6135-6136: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_19 W = 0x%02x\n", (int)(*(regs + 34UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6143-6144: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_20 W = 0x%02x\n", (int)(*(regs + 35UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6151-6152: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_21   = 0x%02x\n", (int)(*(regs + 36UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6159-6160: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_22   = 0x%02x\n", (int)(*(regs + 37UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6167-6168: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_23   = 0x%02x\n", (int)(*(regs + 38UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8907-8908: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_ir_cal_init", "error %d on line %d\n", ret, 852) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6539-6540: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_init_regs", "initializing registers for device @ %d-%04x\n", tmp, (int)(priv->i2c_props.addr)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3199 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            3199 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         2935 (92%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      263 (8%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   6
  Times result was 'false':        5 (83%)
Number of coverage checks:         61124
  BDD entailment checks:           1598
Number of SMT sat checks:          6
  trivial:                         0
  cached:                          0

Max ABE block size:                       532
Number of predicates discovered:          8
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         2104
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 8.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   2104 (100%)
  Total number of models for allsat:      262
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Number of path formula cache hits:   212437 (91%)

Time for post operator:                 22.604s
  Time for path formula creation:       22.231s
    Actual computation:                 20.875s
Time for strengthen operator:            0.273s
  Time for satisfiability checks:        0.009s
Time for prec operator:                853.527s
  Time for abstraction:                853.280s (Max:    77.105s, Count: 3199)
    Boolean abstraction:               812.397s
    Solving time:                      811.051s (Max:    75.188s)
    Model enumeration time:              2.072s
    Time for BDD construction:           0.043s (Max:     0.012s)
Time for merge operator:                 1.534s
Time for coverage check:                 0.081s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):   813.133s

Number of BDD nodes:                               251
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         322 (count: 2684, min: 0, max: 71, avg: 0.12)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.256s
  Time for transition matches:                         0.498s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       316863 (count: 316863, min: 1, max: 1, avg: 1.00) [1 x 316863]

CPA algorithm statistics
------------------------
Number of iterations:            170163
Max size of waitlist:            851
Average size of waitlist:        443
Number of computed successors:   202370
Max successors for one state:    2
Number of times merged:          29763
Number of times stopped:         31361
Number of times breaked:         1

Total time for CPA algorithm:       884.548s (Max:   883.452s)
  Time for choose from waitlist:      0.214s
  Time for precision adjustment:    854.059s
  Time for transfer relation:        26.146s
  Time for merge operator:            2.047s
  Time for stop operator:             0.462s
  Time for adding to reached set:     0.507s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.428s
  Counterexample analysis:                0.411s (Max:     0.411s, Calls: 1)
    Refinement sat check:                 0.381s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.411s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 21
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 21.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     884.985s
Time for refinements:                 0.437s
Average time for refinement:          0.437s
Max time for refinement:              0.437s

Code Coverage
-----------------------------
  Function coverage:      0.182
  Visited lines:          5016
  Total lines:            7404
  Line coverage:          0.677
  Visited conditions:     226
  Total conditions:       902
  Condition coverage:     0.251

CPAchecker general statistics
-----------------------------
Number of program locations:     2554
Number of CFA edges:             3741
Number of relevant variables:    644
Number of functions:             132
Number of loops:                 15
Size of reached set:             170989
  Number of reached locations:   543 (21%)
    Avg states per location:     314
    Max states per location:     2401 (at node N401)
  Number of reached functions:   24 (18%)
  Number of partitions:          170989
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        844

Time for analysis setup:          4.575s
  Time for loading CPAs:          0.557s
  Time for loading parser:        0.680s
  Time for CFA construction:      3.265s
    Time for parsing file(s):     0.868s
    Time for AST to CFA:          1.358s
    Time for CFA sanity check:    0.150s
    Time for post-processing:     0.700s
      Time for var class.:        0.000s
Time for Analysis:              884.985s
CPU time for analysis:          893.620s
Total time for CPAchecker:      889.565s
Total CPU time for CPAchecker:  901.740s

Time for Garbage Collector:       1.505s (in 10 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               1612MB (  1537 MiB) max;    403MB (   384 MiB) avg;   1726MB (  1646 MiB) peak
Used non-heap memory:             24MB (    22 MiB) max;     23MB (    22 MiB) avg;     24MB (    23 MiB) peak
Used in PS Old Gen pool:         103MB (    99 MiB) max;     37MB (    35 MiB) avg;    103MB (    99 MiB) peak
Allocated heap memory:          3131MB (  2986 MiB) max;   2236MB (  2133 MiB) avg
Allocated non-heap memory:        26MB (    25 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:  15153MB ( 14451 MiB) max;  14654MB ( 13975 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
