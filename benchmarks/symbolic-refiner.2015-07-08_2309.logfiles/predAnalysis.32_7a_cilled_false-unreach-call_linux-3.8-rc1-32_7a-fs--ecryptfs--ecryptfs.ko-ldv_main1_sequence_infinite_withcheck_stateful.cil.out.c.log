scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_false-unreach-call_linux-3.8-rc1-32_7a-fs--ecryptfs--ecryptfs.ko-ldv_main1_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-1578125366_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 14113: Function pointer *(tmp->setkey) with type int (*)(struct crypto_tfm *, u8 *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14246: Function pointer *(tmp->update) with type int (*)(struct hash_desc *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7845: Function pointer *(lower_dentry->d_inode->i_op->readlink) with type int (*)(struct dentry *, char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

Skipping recursive function call from ecryptfs_fasync to ecryptfs_fasync (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 5644: Ignoring function call through function pointer *(lower_file->f_op->flush): tmp___0 = (*(lower_file->f_op->flush))(lower_file, td); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5543: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Setting flags for stat...\n", "ecryptfs_open") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9675: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

lines 16015-16016: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: m_1 = [0x%.8x]; m_2 = [0x%.8x]; MAGIC_ECRYPTFS_MARKER = [0x%.8x]\n", "ecryptfs_validate_marker", m_1, m_2, 1015134197) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 16018-16019: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: (m_1 ^ MAGIC_ECRYPTFS_MARKER) = [0x%.8x]\n", "ecryptfs_validate_marker", m_1 ^ 1015134197U) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 16698-16699: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Error reading header metadata; rc = [%d]\n", "ecryptfs_read_headers_virt", rc) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21556: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Could not find a usable authentication token\n", "ecryptfs_parse_packet_set") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21509: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Considering cadidate auth tok:\n", "ecryptfs_parse_packet_set") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 26877-26878: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Auth tok at mem loc [%p]:\n", "ecryptfs_dump_auth_tok", auth_tok) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26882: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * private key type\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26885: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * passphrase type\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26891: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * salt = [%s]\n", "ecryptfs_dump_auth_tok", (char *)(&salt)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26895: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * persistent\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26914: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * signature = [%s]\n", "ecryptfs_dump_auth_tok", (char *)(&sig)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 26917-26918: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * session_key.flags = [0x%x]\n", "ecryptfs_dump_auth_tok", auth_tok->session_key.flags) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26922: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Userspace decrypt request set\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26929: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Userspace encrypt request set\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26936: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Contains decrypted key\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 26938-26939: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * session_key.decrypted_key_size = [0x%x]\n", "ecryptfs_dump_auth_tok", auth_tok->session_key.decrypted_key_size) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26941: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Decrypted session key dump:\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26955: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Contains encrypted key\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 26957-26958: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * session_key.encrypted_key_size = [0x%x]\n", "ecryptfs_dump_auth_tok", auth_tok->session_key.encrypted_key_size) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 26960: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s:  * Encrypted session key dump:\n", "ecryptfs_dump_auth_tok") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 19322-19323: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Minor version number mismatch. Expected [%d]; got [%d]\n", "ecryptfs_verify_version", 4, (int)minor) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 19310-19311: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Major version number mismatch. Expected [%d]; got [%d]\n", "ecryptfs_verify_version", 0, (int)major) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18637-18638: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Unknown error code: [0x%.16lx]\n", "process_request_key_err", err_code) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18630: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Key revoked\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18623: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Key expired\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18616: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: No key\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 21215-21216: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Session key encryption key (size [%d]):\n", "decrypt_passphrase_encrypted_session_key", auth_tok->token.password.session_key_encryption_key_bytes) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14113: Ignoring function call through function pointer *(tmp->setkey): tmp___1 = (*(tmp->setkey))(tmp___0, key, keylen); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 18531: Ignoring function call through function pointer *(tmp___0->decrypt): tmp___1 = (*(tmp___0->decrypt))(desc, dst, src, nbytes); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 21317-21318: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: FEK of size [%zd]:\n", "decrypt_passphrase_encrypted_session_key", crypt_stat->key_size) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18754-18755: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Unsupported packet size: [%zd]\n", "ecryptfs_write_packet_length", size) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18837-18838: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Error generating tag 64 packet header; cannot generate packet length\n", "write_tag_64_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18810-18811: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Error generating tag 64 packet header; cannot generate packet length\n", "write_tag_64_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18791: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Unable to allocate memory\n", "write_tag_64_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18716: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Error parsing packet length\n", "ecryptfs_parse_packet_length") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18709: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Five-byte packet length not supported\n", "ecryptfs_parse_packet_length") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 19029-19030: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Invalid checksum for file encryption  key; expected [%x]; calculated [%x]\n", "parse_tag_65_packet", (int)expected_checksum, (int)checksum) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18980-18981: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: key_size [%d] larger than the maximum key size [%d]\n", "parse_tag_65_packet", session_key->decrypted_key_size, 512) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18960-18961: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: The decrypted key is not long enough to include a cipher code and checksum\n", "parse_tag_65_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18948-18949: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: The message received from ecryptfsd is shorter than expected\n", "parse_tag_65_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18936-18937: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Error parsing packet length; rc = [%d]\n", "parse_tag_65_packet", rc) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18922-18923: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Status indicator has non-zero value [%d]\n", "parse_tag_65_packet", (int)(*(data + (i + 18446744073709551615UL)))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18907: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Type should be ECRYPTFS_TAG_65\n", "parse_tag_65_packet") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 16254-16255: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Cipher code not recognized: [%d]\n", "ecryptfs_cipher_code_to_string", (int)cipher_code) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20423: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Decrypted session key:\n", "decrypt_pki_encrypted_session_key") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 20411-20412: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Cipher code [%d] is invalid\n", "decrypt_pki_encrypted_session_key", (int)cipher_code) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 20377-20378: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Failed to receive tag 65 packet from the user space daemon\n", "decrypt_pki_encrypted_session_key") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20366: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Error sending message to ecryptfsd\n", "decrypt_pki_encrypted_session_key") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20355: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Failed to write tag 64 packet\n", "decrypt_pki_encrypted_session_key") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14230: Ignoring function call through function pointer *(tmp->init): tmp___0 = (*(tmp->init))(desc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14246: Ignoring function call through function pointer *(tmp->update): tmp___0 = (*(tmp->update))(desc, sg, nbytes); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14261: Ignoring function call through function pointer *(tmp->final): tmp___0 = (*(tmp->final))(desc, out); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from crypto_hash_final to ecryptfs_open (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 24746: Ignoring function call through function pointer *(p->_qproc): (*(p->_qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 21465-21466: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: No packet at offset [%zd] of the file header; hex value of character is [0x%.2x]\n", "ecryptfs_parse_packet_set", i, (int)(*(src + i))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21458: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Invalid packet set (Tag 11 not allowed by itself)\n", "ecryptfs_parse_packet_set") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21442: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Error parsing tag 1 packet\n", "ecryptfs_parse_packet_set") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15558-15560: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\017%s: Initializing cipher [%s]; strlen = [%d]; key_size_bits = [%zd]\n", "ecryptfs_init_crypt_ctx", (unsigned char *)(&(crypt_stat->cipher)), (int)tmp, (crypt_stat->key_size) << 3) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15597-15598: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: cryptfs: init_crypt_ctx(): Error initializing cipher [%s]\n", "ecryptfs_init_crypt_ctx", (unsigned char *)(&(crypt_stat->cipher))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 15549: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: No cipher specified\n", "ecryptfs_init_crypt_ctx") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 20910-20911: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Unsupported hash algorithm: [%d]\n", "parse_tag_3_packet", (int)(*(data + ((*packet_size) + 18446744073709551615UL)))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2314 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            2314 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         1670 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      643 (28%)
  Times result was 'false':        134 (6%)
Number of strengthen sat checks:   2337
  Times result was 'false':        2331 (100%)
Number of coverage checks:         32469
  BDD entailment checks:           1147
Number of SMT sat checks:          2337
  trivial:                         0
  cached:                          1652

Max ABE block size:                       372
Number of predicates discovered:          35
Number of abstraction locations:          6
Max number of predicates per location:    34
Avg number of predicates per location:    33
Total predicates per abstraction:         20869
Max number of predicates per abstraction: 34
Avg number of predicates per abstraction: 32.46
Number of irrelevant predicates:          193 (1%)
Number of preds handled by boolean abs:   20676 (99%)
  Total number of models for allsat:      579
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.90

Number of path formula cache hits:   121869 (55%)

Time for post operator:                 24.551s
  Time for path formula creation:       23.898s
    Actual computation:                 19.551s
Time for strengthen operator:           24.012s
  Time for satisfiability checks:       23.733s
Time for prec operator:                788.798s
  Time for abstraction:                788.485s (Max:    20.740s, Count: 2314)
    Boolean abstraction:               728.825s
    Solving time:                      725.815s (Max:    20.169s)
    Model enumeration time:              2.344s
    Time for BDD construction:           0.137s (Max:     0.012s)
Time for merge operator:                12.900s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):   751.871s

Number of BDD nodes:                               4812
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                        2243 (count: 4507, min: 0, max: 626, avg: 0.50)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.463s
  Time for transition matches:                         0.592s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                       274864 (count: 274864, min: 1, max: 1, avg: 1.00) [1 x 274864]

CPA algorithm statistics
------------------------
Number of iterations:            188760
Max size of waitlist:            613
Average size of waitlist:        184
Number of computed successors:   207782
Max successors for one state:    2
Number of times merged:          15661
Number of times stopped:         16778
Number of times breaked:         6

Total time for CPA algorithm:       858.095s (Max:   205.996s)
  Time for choose from waitlist:      0.277s
  Time for precision adjustment:    789.442s
  Time for transfer relation:        52.718s
  Time for merge operator:           13.324s
  Time for stop operator:             0.430s
  Time for adding to reached set:     0.596s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  79 (count: 6, min: 2, max: 17, avg: 13.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   8.044s
  Counterexample analysis:                7.413s (Max:     1.682s, Calls: 6)
    Refinement sat check:                 6.047s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.001s
  Building the counterexample trace:                   7.413s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.003s
  Precision update:                                    0.006s
  ARG update:                                          0.535s

Length of refined path (in blocks):                      42 (count: 5, min: 5, max: 12, avg: 8.40)
Number of affected states:                               15 (count: 5, min: 1, max: 6, avg: 3.00)
Length (states) of path with itp 'true':                 22 (count: 5, min: 3, max: 5, avg: 4.40)
Length (states) of path with itp non-trivial itp:        15 (count: 5, min: 1, max: 6, avg: 3.00)
Length (states) of path with itp 'false':                 5 (count: 5, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              10 (count: 5, min: 0, max: 5, avg: 2.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 53423
Max. size of reached set after ref.:  1928
Avg. size of reached set before ref.: 31727.83
Avg. size of reached set after ref.:  1110.33

Total time for CEGAR algorithm:     866.263s
Time for refinements:                 8.160s
Average time for refinement:          1.360s
Max time for refinement:              1.734s

Code Coverage
-----------------------------
  Function coverage:      0.188
  Visited lines:          6267
  Total lines:            14601
  Line coverage:          0.429
  Visited conditions:     452
  Total conditions:       2548
  Condition coverage:     0.177

CPAchecker general statistics
-----------------------------
Number of program locations:     9114
Number of CFA edges:             12972
Number of relevant variables:    2754
Number of functions:             672
Number of loops:                 63
Size of reached set:             7166
  Number of reached locations:   1512 (17%)
    Avg states per location:     4
    Max states per location:     154 (at node N2485)
  Number of reached functions:   126 (19%)
  Number of partitions:          7165
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N8851 (before line 21473), Function ecryptfs_parse_packet_set called from node N6226, stack depth 7 [697c2262], stack [main, ecryptfs_flush, ecryptfs_open, read_or_initialize_metadata, ecryptfs_read_metadata, ecryptfs_read_headers_virt, ecryptfs_parse_packet_set], Init])
  Number of target states:       0
  Size of final wait list        99

Time for analysis setup:          8.815s
  Time for loading CPAs:          0.701s
  Time for loading parser:        0.539s
  Time for CFA construction:      7.505s
    Time for parsing file(s):     1.680s
    Time for AST to CFA:          3.151s
    Time for CFA sanity check:    0.429s
    Time for post-processing:     1.852s
      Time for var class.:        0.000s
Time for Analysis:              866.263s
CPU time for analysis:          883.780s
Total time for CPAchecker:      875.084s
Total CPU time for CPAchecker:  900.510s

Time for Garbage Collector:       1.912s (in 14 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                601MB (   573 MiB) max;    367MB (   350 MiB) avg;    751MB (   717 MiB) peak
Used non-heap memory:             27MB (    25 MiB) max;     26MB (    25 MiB) avg;     27MB (    26 MiB) peak
Used in PS Old Gen pool:         139MB (   132 MiB) max;     61MB (    58 MiB) avg;    139MB (   132 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   1964MB (  1873 MiB) avg
Allocated non-heap memory:        28MB (    27 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:  14133MB ( 13479 MiB) max;  14016MB ( 13366 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
