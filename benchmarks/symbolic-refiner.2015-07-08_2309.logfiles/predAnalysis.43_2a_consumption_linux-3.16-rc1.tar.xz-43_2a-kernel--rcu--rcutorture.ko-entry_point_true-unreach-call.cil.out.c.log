scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-kernel--rcu--rcutorture.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1416913402_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5553: Function pointer *(cur_ops->get_state) with type unsigned long int (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 8996: Ignoring function call through function pointer *(cur_ops->init): (*(cur_ops->init))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8670: Ignoring function call through function pointer *(cur_ops->cb_barrier): (*(cur_ops->cb_barrier))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from rcu_torture_cleanup to rcu_torture_cleanup (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8771: Ignoring function call through function pointer *(cur_ops->cb_barrier): (*(cur_ops->cb_barrier))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5846: Ignoring function call through function pointer *(cur_ops->readlock): idx = (*(cur_ops->readlock))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5848: Ignoring function call through function pointer *(cur_ops->completed): completed = (*(cur_ops->completed))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5914: Ignoring function call through function pointer *(cur_ops->read_delay): (*(cur_ops->read_delay))(&rand); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from rcu_torture_timer to rcu_torture_timer (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 4466: Ignoring function call through function pointer *(cur_ops->deferred_free): (*(cur_ops->deferred_free))(rp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from rcu_torture_cb to rcu_torture_timer (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from rcu_torture_cb to rcu_torture_cb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from rcu_busted_torture_deferred_free to rcu_torture_cb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from rcu_torture_cb to rcu_busted_torture_deferred_free (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 5933: Ignoring function call through function pointer *(cur_ops->completed): completed_end = (*(cur_ops->completed))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6592: Ignoring function call through function pointer *(cur_ops->readunlock): (*(cur_ops->readunlock))(idx); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5898: Ignoring function call through function pointer *(cur_ops->readunlock): (*(cur_ops->readunlock))(idx); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            138 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            138 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       14 (10%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         21 (15%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      103 (75%)
  Times result was 'false':        22 (16%)
Number of strengthen sat checks:   17
  Times result was 'false':        16 (94%)
Number of coverage checks:         2229
  BDD entailment checks:           69
Number of SMT sat checks:          17
  trivial:                         0
  cached:                          0

Max ABE block size:                       210
Number of predicates discovered:          3
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         103
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   103 (100%)
  Total number of models for allsat:      80
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.78

Number of path formula cache hits:   1250 (11%)

Time for post operator:                  5.363s
  Time for path formula creation:        5.261s
    Actual computation:                  4.873s
Time for strengthen operator:            0.635s
  Time for satisfiability checks:        0.601s
Time for prec operator:                874.101s
  Time for abstraction:                874.077s (Max:   745.689s, Count: 138)
    Boolean abstraction:               869.163s
    Solving time:                      869.124s (Max:   745.212s)
    Model enumeration time:              0.254s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 1.506s
Time for coverage check:                 0.033s
  Time for BDD entailment checks:        0.025s
Total time for SMT solver (w/o itp):   869.980s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                          20 (count: 499, min: 0, max: 20, avg: 0.04)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.194s
Automaton transfers with branching:                0
Automaton transfer successors:                        16986 (count: 16986, min: 1, max: 1, avg: 1.00) [1 x 16986]

CPA algorithm statistics
------------------------
Number of iterations:            10273
Max size of waitlist:            114
Average size of waitlist:        42
Number of computed successors:   11532
Max successors for one state:    2
Number of times merged:          1080
Number of times stopped:         1149
Number of times breaked:         1

Total time for CPA algorithm:       882.993s (Max:   878.416s)
  Time for choose from waitlist:      0.044s
  Time for precision adjustment:    874.226s
  Time for transfer relation:         6.589s
  Time for merge operator:            1.593s
  Time for stop operator:             0.105s
  Time for adding to reached set:     0.158s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   3 (count: 1, min: 3, max: 3, avg: 3.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.181s
  Counterexample analysis:                3.154s (Max:     3.154s, Calls: 1)
    Refinement sat check:                 2.900s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   3.154s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 913
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 913.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     886.189s
Time for refinements:                 3.195s
Average time for refinement:          3.195s
Max time for refinement:              3.195s

Code Coverage
-----------------------------
  Function coverage:      0.695
  Visited lines:          5846
  Total lines:            8001
  Line coverage:          0.731
  Visited conditions:     516
  Total conditions:       1754
  Condition coverage:     0.294

CPAchecker general statistics
-----------------------------
Number of program locations:     3922
Number of CFA edges:             5859
Number of relevant variables:    713
Number of functions:             141
Number of loops:                 45
Size of reached set:             9449
  Number of reached locations:   1426 (36%)
    Avg states per location:     6
    Max states per location:     50 (at node N3152)
  Number of reached functions:   98 (70%)
  Number of partitions:          9449
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        59

Time for analysis setup:          4.161s
  Time for loading CPAs:          0.503s
  Time for loading parser:        0.519s
  Time for CFA construction:      3.072s
    Time for parsing file(s):     0.801s
    Time for AST to CFA:          1.019s
    Time for CFA sanity check:    0.126s
    Time for post-processing:     0.840s
      Time for var class.:        0.000s
Time for Analysis:              886.189s
CPU time for analysis:          892.990s
Total time for CPAchecker:      890.355s
Total CPU time for CPAchecker:  900.340s

Time for Garbage Collector:       0.110s (in 1 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                529MB (   504 MiB) max;    472MB (   450 MiB) avg;    571MB (   544 MiB) peak
Used non-heap memory:             23MB (    22 MiB) max;     22MB (    21 MiB) avg;     23MB (    22 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        25MB (    24 MiB) max;     25MB (    23 MiB) avg
Total process virtual memory:  20692MB ( 19734 MiB) max;  17755MB ( 16932 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
