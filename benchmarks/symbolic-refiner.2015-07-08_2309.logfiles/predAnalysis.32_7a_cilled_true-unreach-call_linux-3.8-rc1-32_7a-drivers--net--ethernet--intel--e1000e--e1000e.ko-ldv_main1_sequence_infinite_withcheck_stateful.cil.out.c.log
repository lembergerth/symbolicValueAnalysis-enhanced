scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--ethernet--intel--e1000e--e1000e.ko-ldv_main1_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_499970142_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 33868: Function pointer *(ops->alloc) with type void * (*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 33916: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 39159: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 33598-33599: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 39066-39067: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 33690: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 39246: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 33735: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 39291: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 39201: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 33645: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 39113: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 14156-14157: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 14159-14160: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 14164-14165: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 14167-14168: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 49982: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 49988: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 49990: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 49916-49917: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 49919-49920: Function pointer *(hw->phy.ops.write_reg_page) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7487: Function pointer *(hw->nvm.ops.read) with type s32  (*)(struct e1000_hw *, u16 , u16 , u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7500: Function pointer *(hw->nvm.ops.write) with type s32  (*)(struct e1000_hw *, u16 , u16 , u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7444: Function pointer *(hw->phy.ops.write_reg) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11408: Function pointer *(hw->phy.ops.write_reg_locked) with type s32  (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 11700: Ignoring function call through function pointer *(hw->phy.ops.acquire): ret_val = (*(hw->phy.ops.acquire))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 20214: Ignoring function call through function pointer *(mac->ops.id_led_init): ret_val = (*(mac->ops.id_led_init))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_init_hw_80003es2lan to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 19306: Ignoring function call through function pointer *(hw->mac.ops.set_lan_id): (*(hw->mac.ops.set_lan_id))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7432: Ignoring function call through function pointer *(hw->phy.ops.read_reg): tmp = (*(hw->phy.ops.read_reg))(hw, offset, data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 27389: Ignoring function call through function pointer *(hw->phy.ops.acquire): ret_val = (*(hw->phy.ops.acquire))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from __e1000e_read_phy_reg_igp to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000e_read_phy_reg_igp to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 46587: Ignoring function call through function pointer *(mac->ops.reset_hw): (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000e_reset to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_reset to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 46587: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from e1000e_reset to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_phy_has_link_generic to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_check_polarity_82577 to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_phy_info_82577 to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 32302: Ignoring function call through function pointer *(hw->phy.ops.get_cable_length): ret_val = (*(hw->phy.ops.get_cable_length))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_get_phy_info_82577 to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_phy_info_82577 to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 32302: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : ret_val = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from e1000_get_phy_info_82577 to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_phy_info_82577 to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7444: Ignoring function call through function pointer *(hw->phy.ops.write_reg): tmp = (*(hw->phy.ops.write_reg))(hw, offset, (int)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 47475: Ignoring function call through function pointer *(hw->phy.ops.acquire): ret_val = (*(hw->phy.ops.acquire))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000e_update_phy_stats to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_update_phy_stats to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 47475: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : ret_val = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from e1000e_update_phy_stats to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_update_phy_stats to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_update_phy_stats to e1000_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_get_phy_info_m88 to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_check_polarity_m88 to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 26824: Ignoring function call through function pointer *(hw->phy.ops.get_cable_length): tmp = (*(hw->phy.ops.get_cable_length))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 26824: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : tmp = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_get_cable_length to e1000e_get_phy_info_m88 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 27624: Ignoring function call through function pointer *(hw->phy.ops.acquire): ret_val = (*(hw->phy.ops.acquire))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 27624: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : ret_val = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000e_get_phy_info_m88 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_write_kmrn_reg to e1000_setup_copper_link_ich8lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000e_get_cable_length_m88 to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 17077: Ignoring function call through function pointer *(mac->ops.id_led_init): ret_val = (*(mac->ops.id_led_init))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 17077: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : ret_val = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000e_get_phy_info_m88 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_setup_copper_link_ich8lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_init_hw_ich8lan to e1000_init_hw_ich8lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_shutdown to e1000e_down (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_lv_jumbo_workaround_ich8lan to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 27547: Ignoring function call through function pointer *(hw->phy.ops.acquire): ret_val = (*(hw->phy.ops.acquire))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_init_hw_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_get_variants_80003es2lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 27547: Return type of function e1000_io_slot_reset is pci_ers_result_t , but result is used as type s32 : ret_val = e1000_io_slot_reset(hw); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_io_slot_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_get_phy_info_82577 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_nway_reset (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000e_get_phy_info_m88 (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_setup_copper_link_ich8lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_init_hw_ich8lan (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __e1000_read_kmrn_reg to e1000_suspend (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_cfg_kmrn_10_100_80003es2lan to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from e1000_cfg_kmrn_1000_80003es2lan to e1e_rphy (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16718: Ignoring function call through function pointer *(hw->nvm.ops.valid_led_default): ret_val = (*(hw->nvm.ops.valid_led_default))(hw, &data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2754 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            2754 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         1827 (66%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      926 (34%)
  Times result was 'false':        662 (24%)
Number of strengthen sat checks:   52
  Times result was 'false':        51 (98%)
Number of coverage checks:         5426
  BDD entailment checks:           1360
Number of SMT sat checks:          52
  trivial:                         0
  cached:                          26

Max ABE block size:                       510
Number of predicates discovered:          10
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         9260
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 10.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   9260 (100%)
  Total number of models for allsat:      604
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.65

Number of path formula cache hits:   25368 (32%)

Time for post operator:                 18.509s
  Time for path formula creation:       18.258s
    Actual computation:                 14.911s
Time for strengthen operator:            0.154s
  Time for satisfiability checks:        0.051s
Time for prec operator:                833.841s
  Time for abstraction:                833.623s (Max:   115.143s, Count: 2754)
    Boolean abstraction:               814.812s
    Solving time:                      815.117s (Max:   115.242s)
    Model enumeration time:              0.728s
    Time for BDD construction:           0.099s (Max:     0.013s)
Time for merge operator:                 2.265s
Time for coverage check:                 0.019s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):   815.896s

Number of BDD nodes:                               247
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         401 (count: 5093, min: 0, max: 288, avg: 0.08)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.497s
Automaton transfers with branching:                0
Automaton transfer successors:                       102853 (count: 102853, min: 1, max: 1, avg: 1.00) [1 x 102853]

CPA algorithm statistics
------------------------
Number of iterations:            67621
Max size of waitlist:            5628
Average size of waitlist:        4853
Number of computed successors:   77074
Max successors for one state:    2
Number of times merged:          2033
Number of times stopped:         3393
Number of times breaked:         1

Total time for CPA algorithm:       863.687s (Max:   863.148s)
  Time for choose from waitlist:      0.098s
  Time for precision adjustment:    834.124s
  Time for transfer relation:        26.054s
  Time for merge operator:            2.402s
  Time for stop operator:             0.195s
  Time for adding to reached set:     0.297s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.302s
  Counterexample analysis:                0.243s (Max:     0.243s, Calls: 1)
    Refinement sat check:                 0.211s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.243s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 22
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 22.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     863.998s
Time for refinements:                 0.311s
Average time for refinement:          0.311s
Max time for refinement:              0.311s

Code Coverage
-----------------------------
  Function coverage:      0.166
  Visited lines:          9635
  Total lines:            29668
  Line coverage:          0.325
  Visited conditions:     2640
  Total conditions:       27466
  Condition coverage:     0.096

CPAchecker general statistics
-----------------------------
Number of program locations:     49158
Number of CFA edges:             89421
Number of relevant variables:    5179
Number of functions:             759
Number of loops:                 172
Size of reached set:             72998
  Number of reached locations:   3987 (8%)
    Avg states per location:     18
    Max states per location:     1758 (at node N0)
  Number of reached functions:   126 (17%)
  Number of partitions:          72998
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        5396

Time for analysis setup:         15.248s
  Time for loading CPAs:          0.933s
  Time for loading parser:        0.546s
  Time for CFA construction:     13.695s
    Time for parsing file(s):     2.855s
    Time for AST to CFA:          3.579s
    Time for CFA sanity check:    0.713s
    Time for post-processing:     6.363s
      Time for var class.:        0.000s
Time for Analysis:              863.999s
CPU time for analysis:          873.120s
Total time for CPAchecker:      879.252s
Total CPU time for CPAchecker:  901.530s

Time for Garbage Collector:       0.840s (in 4 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               1646MB (  1570 MiB) max;    879MB (   838 MiB) avg;   1723MB (  1643 MiB) peak
Used non-heap memory:             26MB (    25 MiB) max;     25MB (    24 MiB) avg;     27MB (    26 MiB) peak
Used in PS Old Gen pool:          55MB (    52 MiB) max;     21MB (    20 MiB) avg;     55MB (    52 MiB) peak
Allocated heap memory:          3611MB (  3444 MiB) max;   2857MB (  2725 MiB) avg
Allocated non-heap memory:        28MB (    27 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:  14789MB ( 14104 MiB) max;  14044MB ( 13394 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
