scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-validator-v0.6/ALL.prp ../svcomp15/ldv-validator-v0.6/linux-stable-4a349aa-1-32_7a-drivers--media--video--tlg2300--poseidon.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-959171874_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___0 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___1 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___10 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___11 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___12 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___13 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___15 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___16 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___17 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___18 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___2 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___4 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___5 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_4::tmp___8 produces garbage! (in the following line(s):
 line 18554:	N6772 -{ldv_main_exported_4();}-> N6774) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

line 17905: Ignoring function call through function pointer *(pd->pm_resume): tmp___1 = (*(pd->pm_resume))(pd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from poseidon_resume to poseidon_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 17828: Ignoring function call through function pointer *(pd->pm_suspend): tmp___2 = (*(pd->pm_suspend))(pd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

The void * pointer check_firmware::buf to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 17992:	N6448 -{ret = usb_control_msg(udev, tmp | 2147483776U, 130, 192, 0, 0, buf, 8, 5000);}-> N6449) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

Destroying the void * pointer  check_firmware::buf produces garbage! (in the following line(s):
 line 18037:	N6476 -{check_firmware(udev, &ret);}-> N6477) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___0 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___1 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___10 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___12 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___13 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___14 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___15 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___16 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___17 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___18 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___19 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___2 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___20 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___22 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___24 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___25 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___27 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___28 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___30 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___31 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___32 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___6 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___7 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___8 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_9::tmp___9 produces garbage! (in the following line(s):
 line 18393:	N6662 -{ldv_main_exported_9();}-> N6664) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_7::tmp___2 produces garbage! (in the following line(s):
 line 18383:	N6655 -{ldv_main_exported_7();}-> N6657) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            6384 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            6384 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         4058 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2325 (36%)
  Times result was 'false':        1583 (25%)
Number of strengthen sat checks:   3019
  Times result was 'false':        3014 (100%)
Number of coverage checks:         27630
  BDD entailment checks:           2406
Number of SMT sat checks:          3019
  trivial:                         0
  cached:                          1927

Max ABE block size:                       391
Number of predicates discovered:          15
Number of abstraction locations:          3
Max number of predicates per location:    14
Avg number of predicates per location:    12
Total predicates per abstraction:         24294
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 10.45
Number of irrelevant predicates:          1034 (4%)
Number of preds handled by boolean abs:   23260 (96%)
  Total number of models for allsat:      1145
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.49

Number of path formula cache hits:   139902 (69%)

Time for post operator:                271.548s
  Time for path formula creation:      271.097s
    Actual computation:                268.930s
Time for strengthen operator:           72.798s
  Time for satisfiability checks:       72.546s
Time for prec operator:                506.103s
  Time for abstraction:                505.688s (Max:     3.708s, Count: 6384)
    Boolean abstraction:               424.863s
    Solving time:                      419.529s (Max:     3.571s)
    Model enumeration time:              4.703s
    Time for BDD construction:           0.179s (Max:     0.009s)
Time for merge operator:                 6.425s
Time for coverage check:                 0.054s
  Time for BDD entailment checks:        0.027s
Total time for SMT solver (w/o itp):   496.755s

Number of BDD nodes:                               377
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                        1476 (count: 11859, min: 0, max: 106, avg: 0.12)
Time for BDD node cleanup:                             0.029s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.977s
  Time for transition matches:                         0.770s
  Time for transition assertions:                      0.006s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                       372955 (count: 372955, min: 1, max: 1, avg: 1.00) [1 x 372955]

CPA algorithm statistics
------------------------
Number of iterations:            170694
Max size of waitlist:            768
Average size of waitlist:        249
Number of computed successors:   188996
Max successors for one state:    2
Number of times merged:          12612
Number of times stopped:         15017
Number of times breaked:         5

Total time for CPA algorithm:       864.530s (Max:   424.955s)
  Time for choose from waitlist:      0.217s
  Time for precision adjustment:    506.647s
  Time for transfer relation:       348.613s
  Time for merge operator:            6.810s
  Time for stop operator:             0.424s
  Time for adding to reached set:     0.573s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  53 (count: 5, min: 2, max: 23, avg: 10.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.543s
  Counterexample analysis:                4.106s (Max:     1.774s, Calls: 5)
    Refinement sat check:                 3.521s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   4.106s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.002s
  Precision update:                                    0.004s
  ARG update:                                          0.398s

Length of refined path (in blocks):                       8 (count: 4, min: 2, max: 2, avg: 2.00)
Number of affected states:                                4 (count: 4, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 4, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         4 (count: 4, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 4, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 74651
Max. size of reached set after ref.:  49
Avg. size of reached set before ref.: 30222.80
Avg. size of reached set after ref.:  39.40

Total time for CEGAR algorithm:     869.168s
Time for refinements:                 4.637s
Average time for refinement:          0.927s
Max time for refinement:              1.919s

Code Coverage
-----------------------------
  Function coverage:      0.623
  Visited lines:          10396
  Total lines:            11990
  Line coverage:          0.867
  Visited conditions:     1134
  Total conditions:       1586
  Condition coverage:     0.715

CPAchecker general statistics
-----------------------------
Number of program locations:     4783
Number of CFA edges:             6671
Number of relevant variables:    1281
Number of functions:             342
Number of loops:                 33
Size of reached set:             21479
  Number of reached locations:   3189 (67%)
    Avg states per location:     6
    Max states per location:     358 (at node N5829)
  Number of reached functions:   213 (62%)
  Number of partitions:          21479
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        125

Time for analysis setup:          5.942s
  Time for loading CPAs:          0.622s
  Time for loading parser:        0.511s
  Time for CFA construction:      4.737s
    Time for parsing file(s):     1.536s
    Time for AST to CFA:          1.685s
    Time for CFA sanity check:    0.244s
    Time for post-processing:     1.045s
      Time for var class.:        0.000s
Time for Analysis:              869.168s
CPU time for analysis:          889.360s
Total time for CPAchecker:      875.115s
Total CPU time for CPAchecker:  900.280s

Time for Garbage Collector:       4.650s (in 59 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               2158MB (  2058 MiB) max;    733MB (   699 MiB) avg;   2325MB (  2217 MiB) peak
Used non-heap memory:             25MB (    24 MiB) max;     25MB (    23 MiB) avg;     26MB (    24 MiB) peak
Used in PS Old Gen pool:         159MB (   151 MiB) max;     89MB (    85 MiB) avg;    159MB (   151 MiB) peak
Allocated heap memory:          3611MB (  3444 MiB) max;   2704MB (  2579 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     27MB (    25 MiB) avg
Total process virtual memory:  13987MB ( 13339 MiB) max;  13835MB ( 13194 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
