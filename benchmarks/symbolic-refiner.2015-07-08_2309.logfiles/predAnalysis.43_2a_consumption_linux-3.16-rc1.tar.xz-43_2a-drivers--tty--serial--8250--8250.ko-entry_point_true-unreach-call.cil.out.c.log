scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--tty--serial--8250--8250.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-885090229_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13940: Function pointer *(ops->alloc) with type void * (*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13987: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 13670-13671: Function pointer *(ops->map_page) with type dma_addr_t  (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13762: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13807: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13717: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14007: Function pointer *(chan->device->device_control) with type int (*)(struct dma_chan *, enum dma_ctrl_cmd , unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14047: Function pointer *(chan->device->device_prep_slave_sg) with type struct dma_async_tx_descriptor * (*)(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction , unsigned long, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14084: Function pointer *(chan->device->device_tx_status) with type enum dma_status  (*)(struct dma_chan *, dma_cookie_t , struct dma_tx_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10149: Function pointer *serial8250_isa_config with type void (*)(int, struct uart_port *, unsigned short *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10827: Function pointer *serial8250_isa_config with type void (*)(int, struct uart_port *, unsigned short *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4947: Function pointer *(pv_cpu_ops.io_delay) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 5510: Ignoring function call through function pointer *(up___0->serial_in): tmp = (*(up___0->serial_in))(up___0, offset); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14084: Ignoring function call through function pointer *(chan->device->device_tx_status): tmp = (*(chan->device->device_tx_status))(chan, cookie, state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14047: Ignoring function call through function pointer *(chan->device->device_prep_slave_sg): tmp = (*(chan->device->device_prep_slave_sg))(chan, &sg, 1U, dir, flags, (void *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14096: Ignoring function call through function pointer *(desc->tx_submit): tmp = (*(desc->tx_submit))(desc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_tx_empty to serial_port_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10827: Ignoring call via function pointer serial8250_isa_config for which no suitable target was found in line: (*serial8250_isa_config)(0, &(uart->port), &(uart->capabilities)); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10827: Ignoring function call through function pointer *serial8250_isa_config: (*serial8250_isa_config)(0, &(uart->port), &(uart->capabilities)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5522: Ignoring function call through function pointer *(up___0->serial_out): (*(up___0->serial_out))(up___0, offset, value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5660: Ignoring function call through function pointer *(up___0->port.serial_out): (*(up___0->port.serial_out))(&(up___0->port), offset, value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial_out to serial8250_pm (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial_out to serial8250_do_pm (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9551: Ignoring function call through function pointer *(port->pm): (*(port->pm))(port, state, oldstate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_pm to serial8250_pm (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_pm to serial8250_do_pm (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 5648: Ignoring function call through function pointer *(up___0->port.serial_in): tmp = (*(up___0->port.serial_in))(&(up___0->port), offset); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5648: Return type of function serial8250_rx_dma is int, but result is used as type unsigned int: tmp = serial8250_rx_dma(&(up___0->port), offset); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from serial_in to serial8250_rx_dma (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_handle_irq to serial_port_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_handle_irq to serial8250_rx_dma (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_rx_chars to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 5599: Ignoring function call through function pointer *(port->handle_break): (*(port->handle_break))(port); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_set_sleep to serial_out (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_tx_chars to serial_port_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13762: Ignoring function call through function pointer *(ops->sync_single_for_cpu): (*(ops->sync_single_for_cpu))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_tx_dma to dmaengine_submit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13807: Ignoring function call through function pointer *(ops->sync_single_for_device): (*(ops->sync_single_for_device))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14132: Ignoring function call through function pointer *(chan->device->device_issue_pending): (*(chan->device->device_issue_pending))(chan); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from dma_async_issue_pending to __dma_tx_complete (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_start_tx to serial8250_tx_dma (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_start_tx to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13987: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13717: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_shutdown to serial_port_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from disable_rsa to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_backup_timeout to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8198: Ignoring function call through function pointer *(up___0->port.handle_irq): (*(up___0->port.handle_irq))(&(up___0->port)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from serial8250_timeout to serial8250_resume (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_modem_status to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_timeout to serial8250_tx_dma (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __enable_rsa to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_startup to serial_port_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from serial8250_startup to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from wait_for_xmitr to serial_in (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6008: Ignoring function call through function pointer *(p->serial_out): (*(p->serial_out))(p, offset, value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6001: Ignoring function call through function pointer *(p->serial_out): (*(p->serial_out))(p, offset, value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6003: Ignoring function call through function pointer *(p->serial_in): (*(p->serial_in))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6003: Return type of function serial8250_rx_dma is int, but result is used as type unsigned int: serial8250_rx_dma(p, 3); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from serial_port_out_sync to serial8250_rx_dma (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6003: Return type of function serial8250_handle_irq is int, but result is used as type unsigned int: serial8250_handle_irq(p, 3); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from serial_port_out_sync to serial8250_handle_irq (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13940: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 13670-13671: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)-24189255811072L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13835: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            246 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            246 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       58 (24%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         105 (43%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      83 (34%)
  Times result was 'false':        11 (4%)
Number of strengthen sat checks:   7
  Times result was 'false':        6 (86%)
Number of coverage checks:         77905
  BDD entailment checks:           117
Number of SMT sat checks:          7
  trivial:                         0
  cached:                          5

Max ABE block size:                       2038
Number of predicates discovered:          3
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         83
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   83 (100%)
  Total number of models for allsat:      75
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.90

Number of path formula cache hits:   128106 (33%)

Time for post operator:                 43.199s
  Time for path formula creation:       42.383s
    Actual computation:                 30.872s
Time for strengthen operator:            0.469s
  Time for satisfiability checks:        0.006s
Time for prec operator:                792.846s
  Time for abstraction:                792.536s (Max:   151.152s, Count: 246)
    Boolean abstraction:               761.747s
    Solving time:                      761.997s (Max:   147.549s)
    Model enumeration time:              1.493s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                19.102s
Time for coverage check:                 0.110s
  Time for BDD entailment checks:        0.030s
Total time for SMT solver (w/o itp):   763.497s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                          76 (count: 511, min: 0, max: 54, avg: 0.15)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.924s
  Time for transition matches:                         0.847s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       512010 (count: 512010, min: 1, max: 1, avg: 1.00) [1 x 512010]

CPA algorithm statistics
------------------------
Number of iterations:            342266
Max size of waitlist:            234
Average size of waitlist:        126
Number of computed successors:   381619
Max successors for one state:    2
Number of times merged:          38894
Number of times stopped:         39011
Number of times breaked:         1

Total time for CPA algorithm:       868.231s (Max:   836.096s)
  Time for choose from waitlist:      0.380s
  Time for precision adjustment:    794.002s
  Time for transfer relation:        49.752s
  Time for merge operator:           19.996s
  Time for stop operator:             0.985s
  Time for adding to reached set:     1.111s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   5 (count: 1, min: 5, max: 5, avg: 5.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.843s
  Counterexample analysis:                6.386s (Max:     6.386s, Calls: 1)
    Refinement sat check:                 5.511s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   6.387s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 108794
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 108794.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     875.163s
Time for refinements:                 6.931s
Average time for refinement:          6.931s
Max time for refinement:              6.931s

Code Coverage
-----------------------------
  Function coverage:      0.702
  Visited lines:          7722
  Total lines:            9174
  Line coverage:          0.842
  Visited conditions:     933
  Total conditions:       1604
  Condition coverage:     0.582

CPAchecker general statistics
-----------------------------
Number of program locations:     4114
Number of CFA edges:             6292
Number of relevant variables:    1223
Number of functions:             225
Number of loops:                 24
Size of reached set:             233804
  Number of reached locations:   2337 (57%)
    Avg states per location:     100
    Max states per location:     9710 (at node N105)
  Number of reached functions:   158 (70%)
  Number of partitions:          233804
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        207

Time for analysis setup:          5.580s
  Time for loading CPAs:          0.668s
  Time for loading parser:        0.616s
  Time for CFA construction:      4.219s
    Time for parsing file(s):     1.109s
    Time for AST to CFA:          1.554s
    Time for CFA sanity check:    0.172s
    Time for post-processing:     1.152s
      Time for var class.:        0.000s
Time for Analysis:              875.163s
CPU time for analysis:          891.350s
Total time for CPAchecker:      880.748s
Total CPU time for CPAchecker:  901.650s

Time for Garbage Collector:       2.020s (in 8 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               2337MB (  2228 MiB) max;   1124MB (  1071 MiB) avg;   2383MB (  2272 MiB) peak
Used non-heap memory:             25MB (    24 MiB) max;     25MB (    24 MiB) avg;     26MB (    25 MiB) peak
Used in PS Old Gen pool:         124MB (   119 MiB) max;     85MB (    81 MiB) avg;    124MB (   119 MiB) peak
Allocated heap memory:          4674MB (  4458 MiB) max;   3607MB (  3440 MiB) avg
Allocated non-heap memory:        28MB (    26 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:  16782MB ( 16004 MiB) max;  15656MB ( 14931 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
