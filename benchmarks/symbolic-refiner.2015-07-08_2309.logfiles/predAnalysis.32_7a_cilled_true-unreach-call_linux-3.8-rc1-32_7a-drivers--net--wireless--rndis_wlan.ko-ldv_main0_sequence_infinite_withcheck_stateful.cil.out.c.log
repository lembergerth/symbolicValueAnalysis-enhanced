scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--wireless--rndis_wlan.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-29758044_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8435:	N751 -{ret = rndis_set_oid(usbdev, 218169621U, 0, 0);}-> N754) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8786:	N967 -{ret = rndis_set_oid(usbdev, 218169608U, (const void *)(&tmp___0), 4);}-> N968) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 14692:	N4571 -{rndis_set_oid(usbdev, 65806U, (const void *)(&filter), 4);}-> N4572) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 10035:	N1710 -{ret = rndis_set_oid(usbdev, 16843011U, (const void *)mc_addrs, mc_count * 6);}-> N1712) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 10074:	N1731 -{ret = rndis_set_oid(usbdev, 65806U, (const void *)(&filter), 4);}-> N1732) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8731:	N935 -{ret = rndis_set_oid(usbdev, 218169627U, (const void *)(&tmp), 4);}-> N936) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 9206:	N1201 -{ret = rndis_set_oid(usbdev, 218169619U, (const void *)(&ndis_key), 44);}-> N1212) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8235:	N636 -{ret = rndis_set_oid(usbdev, 218169602U, (const void *)ssid, 36);}-> N637) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8600:	N853 -{ret = rndis_set_oid(usbdev, 218169624U, (const void *)(&tmp___0), 4);}-> N854) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8663:	N886 -{tmp___2 = rndis_set_oid(usbdev, 218169625U, (const void *)(&tmp___0), 4);}-> N892) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 14400:	N4408 -{retval = rndis_set_oid(usbdev, 65806U, (const void *)(&tmp), 4);}-> N4409) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 14404:	N4410 -{retval = rndis_query_oid(usbdev, 16843012U, (void *)(&tmp), &len);}-> N4411) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 13774:	N4015 -{retval = rndis_query_oid(usbdev, 218169859U, (void *)(&networks_supported), &len);}-> N4016) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 13830:	N4054 -{retval = rndis_query_oid(usbdev, 218169634U, (void *)caps, &len);}-> N4055) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8892:	N1028 -{tmp___1 = rndis_set_oid(usbdev, 218169865U, (const void *)(&tmp), 4);}-> N1029) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8846:	N1001 -{tmp___1 = rndis_set_oid(usbdev, 218169866U, (const void *)(&tmp), 4);}-> N1002) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8141:	N564 -{ret = rndis_set_oid(dev, 66075U, (const void *)infobuf, info_len);}-> N581) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 12782:	N3403 -{ret = rndis_set_oid(usbdev, 218169878U, (const void *)(&mode), 4);}-> N3404) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 12705:	N3354 -{tmp___1 = rndis_set_oid(usbdev, 218169635U, (const void *)(&pmkid), 8);}-> N3355) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 10163:	N1782 -{ret = rndis_query_oid(usbdev, 218169635U, (void *)pmkids, &len);}-> N1783) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 10230:	N1821 -{ret = rndis_set_oid(usbdev, 218169635U, (const void *)pmkids, __CPAchecker_TMP_1);}-> N1822) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 12365:	N3151 -{ret = rndis_query_oid(usbdev, 65799U, (void *)(&linkspeed), &len);}-> N3152) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 12378:	N3158 -{ret = rndis_query_oid(usbdev, 218169862U, (void *)(&rssi), &len);}-> N3159) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 9862:	N1584 -{ret = rndis_set_oid(usbdev, 218169630U, (const void *)(&remove_key___0), 16);}-> N1604) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 9874:	N1609 -{ret = rndis_set_oid(usbdev, 218169620U, (const void *)(&keyindex), 4);}-> N1610) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 8336:	N691 -{ret = rndis_query_oid(usbdev, 218169601U, (void *)bssid, &len);}-> N692) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 9585:	N1428 -{ret = rndis_set_oid(usbdev, 218169629U, (const void *)(&ndis_key), (int)(ndis_key.size));}-> N1442) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 8984:	N1080 -{ret = rndis_query_oid(usbdev, 218169873U, (void *)(&config), &len);}-> N1081) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 9017:	N1098 -{ret = rndis_set_oid(usbdev, 218169873U, (const void *)(&config), 32);}-> N1099) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8286:	N664 -{ret = rndis_set_oid(usbdev, 218169601U, (const void *)bssid, 6);}-> N665) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_query_oid::u$buf produces garbage! (in the following line(s):
 line 11053:	N2338 -{ret = rndis_query_oid(usbdev, 218169879U, buf, &new_len);}-> N2339) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_check_bssid_list::buf produces garbage! (in the following line(s):
 line 10803:	N2169 -{rndis_check_bssid_list(usbdev, 0, 0);}-> N2174) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  rndis_set_oid::u$buf produces garbage! (in the following line(s):
 line 8215:	N624 -{tmp___0 = rndis_set_oid(usbdev, 218169626U, (const void *)(&tmp), 4);}-> N625) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1118 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1118 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       5 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         349 (31%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      764 (68%)
  Times result was 'false':        297 (27%)
Number of strengthen sat checks:   1317
  Times result was 'false':        1316 (100%)
Number of coverage checks:         28814
  BDD entailment checks:           500
Number of SMT sat checks:          1317
  trivial:                         0
  cached:                          108

Max ABE block size:                       1099
Number of predicates discovered:          8
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         6112
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 8.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   6112 (100%)
  Total number of models for allsat:      479
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.63

Number of path formula cache hits:   11530 (9%)

Time for post operator:                 14.719s
  Time for path formula creation:       14.329s
    Actual computation:                 13.195s
Time for strengthen operator:          289.950s
  Time for satisfiability checks:      289.763s
Time for prec operator:                564.483s
  Time for abstraction:                564.338s (Max:   241.711s, Count: 1118)
    Boolean abstraction:               529.321s
    Solving time:                      527.808s (Max:   241.789s)
    Model enumeration time:              2.807s
    Time for BDD construction:           0.048s (Max:     0.001s)
Time for merge operator:                 4.073s
Time for coverage check:                 0.044s
  Time for BDD entailment checks:        0.014s
Total time for SMT solver (w/o itp):   820.366s

Number of BDD nodes:                               230
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         315 (count: 3583, min: 0, max: 112, avg: 0.09)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.062s
  Time for transition matches:                         0.400s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.005s
Automaton transfers with branching:                0
Automaton transfer successors:                       200627 (count: 200627, min: 1, max: 1, avg: 1.00) [1 x 200627]

CPA algorithm statistics
------------------------
Number of iterations:            116112
Max size of waitlist:            331
Average size of waitlist:        193
Number of computed successors:   131119
Max successors for one state:    2
Number of times merged:          14157
Number of times stopped:         14657
Number of times breaked:         1

Total time for CPA algorithm:       878.963s (Max:   878.235s)
  Time for choose from waitlist:      0.173s
  Time for precision adjustment:    564.871s
  Time for transfer relation:       307.786s
  Time for merge operator:            4.515s
  Time for stop operator:             0.303s
  Time for adding to reached set:     0.441s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.068s
  Counterexample analysis:                0.044s (Max:     0.044s, Calls: 1)
    Refinement sat check:                 0.037s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.044s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 382
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 382.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     879.040s
Time for refinements:                 0.077s
Average time for refinement:          0.077s
Max time for refinement:              0.077s

Code Coverage
-----------------------------
  Function coverage:      0.723
  Visited lines:          9570
  Total lines:            10201
  Line coverage:          0.938
  Visited conditions:     874
  Total conditions:       1110
  Condition coverage:     0.787

CPAchecker general statistics
-----------------------------
Number of program locations:     3253
Number of CFA edges:             4562
Number of relevant variables:    1152
Number of functions:             159
Number of loops:                 16
Size of reached set:             115784
  Number of reached locations:   2593 (80%)
    Avg states per location:     44
    Max states per location:     2582 (at node N4935)
  Number of reached functions:   115 (72%)
  Number of partitions:          115784
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          5.323s
  Time for loading CPAs:          0.740s
  Time for loading parser:        0.550s
  Time for CFA construction:      3.962s
    Time for parsing file(s):     1.525s
    Time for AST to CFA:          1.256s
    Time for CFA sanity check:    0.177s
    Time for post-processing:     0.802s
      Time for var class.:        0.000s
Time for Analysis:              879.040s
CPU time for analysis:          891.730s
Total time for CPAchecker:      884.368s
Total CPU time for CPAchecker:  901.420s

Time for Garbage Collector:       1.138s (in 6 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                647MB (   617 MiB) max;    353MB (   336 MiB) avg;    679MB (   648 MiB) peak
Used non-heap memory:             25MB (    24 MiB) max;     24MB (    23 MiB) avg;     25MB (    24 MiB) peak
Used in PS Old Gen pool:          44MB (    42 MiB) max;     31MB (    30 MiB) avg;     44MB (    42 MiB) peak
Allocated heap memory:          2039MB (  1945 MiB) max;   2029MB (  1935 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     27MB (    25 MiB) avg
Total process virtual memory:  14896MB ( 14206 MiB) max;  14157MB ( 13501 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
