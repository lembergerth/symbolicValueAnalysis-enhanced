scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -timelimit 900s -stats -spec ../svcomp15/ntdrivers/ALL.prp ../svcomp15/ntdrivers/cdaudio_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-1128185413_tempdir
The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#2 to a deferred allocation escaped form tracking! Allocating array void[904]. (in the following line(s):
 line 7562:	N3907 -{irp.AssociatedIrp.SystemBuffer = malloc(904);}-> N3908) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#20 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#77 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#85 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#93 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#105 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#109 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#117 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#128 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#134 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#138 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#143 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#147 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7721:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            6 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            6 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       2 (33%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4 (67%)
  Times result was 'false':        2 (33%)
Number of strengthen sat checks:   119
  Times result was 'false':        118 (99%)
Number of coverage checks:         1384
  BDD entailment checks:           2
Number of SMT sat checks:          119
  trivial:                         0
  cached:                          26

Max ABE block size:                       109
Number of predicates discovered:          8
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         24
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 6.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   24 (100%)
  Total number of models for allsat:      2
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.50

Number of path formula cache hits:   1360 (26%)

Time for post operator:                  1.351s
  Time for path formula creation:        1.305s
    Actual computation:                  1.215s
Time for strengthen operator:            7.873s
  Time for satisfiability checks:        7.852s
Time for prec operator:                  0.475s
  Time for abstraction:                  0.468s (Max:     0.186s, Count: 6)
    Boolean abstraction:                 0.387s
    Solving time:                        0.376s (Max:     0.158s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.607s
Time for coverage check:                 0.012s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):     8.228s

Number of BDD nodes:                               217
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 41, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.117s
Automaton transfers with branching:                0
Automaton transfer successors:                         9074 (count: 9074, min: 1, max: 1, avg: 1.00) [1 x 9074]

CPA algorithm statistics
------------------------
Number of iterations:            4245
Max size of waitlist:            27
Average size of waitlist:        12
Number of computed successors:   4946
Max successors for one state:    2
Number of times merged:          691
Number of times stopped:         693
Number of times breaked:         1

Total time for CPA algorithm:        11.047s (Max:     8.729s)
  Time for choose from waitlist:      0.027s
  Time for precision adjustment:      0.529s
  Time for transfer relation:         9.547s
  Time for merge operator:            0.689s
  Time for stop operator:             0.046s
  Time for adding to reached set:     0.081s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.183s
  Counterexample analysis:                0.150s (Max:     0.150s, Calls: 1)
    Refinement sat check:                 0.129s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.150s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 1011
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 1011.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:      11.244s
Time for refinements:                 0.195s
Average time for refinement:          0.195s
Max time for refinement:              0.195s

Code Coverage
-----------------------------
  Function coverage:      0.345
  Visited lines:          4288
  Total lines:            6461
  Line coverage:          0.664
  Visited conditions:     450
  Total conditions:       924
  Condition coverage:     0.487

CPAchecker general statistics
-----------------------------
Number of program locations:     2222
Number of CFA edges:             2951
Number of relevant variables:    401
Number of functions:             87
Number of loops:                 19
Size of reached set:             3242
  Number of reached locations:   990 (45%)
    Avg states per location:     3
    Max states per location:     91 (at node N1)
  Number of reached functions:   30 (34%)
  Number of partitions:          3242
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.346s
  Time for loading CPAs:          0.492s
  Time for loading parser:        0.527s
  Time for CFA construction:      3.256s
    Time for parsing file(s):     0.904s
    Time for AST to CFA:          1.312s
    Time for CFA sanity check:    0.123s
    Time for post-processing:     0.699s
      Time for var class.:        0.000s
Time for Analysis:               11.244s
CPU time for analysis:           13.400s
Total time for CPAchecker:       15.595s
Total CPU time for CPAchecker:   21.160s

Time for Garbage Collector:       0.000s (in 0 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                383MB (   365 MiB) max;    279MB (   266 MiB) avg;    393MB (   375 MiB) peak
Used non-heap memory:             22MB (    21 MiB) max;     19MB (    18 MiB) avg;     22MB (    21 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        24MB (    23 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:  13760MB ( 13122 MiB) max;  13619MB ( 12988 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
