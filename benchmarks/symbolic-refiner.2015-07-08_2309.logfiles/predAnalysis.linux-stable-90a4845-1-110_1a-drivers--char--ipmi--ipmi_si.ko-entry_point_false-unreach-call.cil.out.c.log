scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-validator-v0.6/ALL.prp ../svcomp15/ldv-validator-v0.6/linux-stable-90a4845-1-110_1a-drivers--char--ipmi--ipmi_si.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-1462402104_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 14421: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14423: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14425: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14427: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14429: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14431: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14380: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14384: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14375: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14359: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14348: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14350: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14314: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14318: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14309: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14297: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14263: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14254: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13888: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13890: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13894: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13896: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13930: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13858: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13860: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13862: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13853: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6356: Function pointer *(smi_info->io.outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6510: Function pointer *(info->io.outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6541: Function pointer *(info->io.outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13980: Function pointer *(bt->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11782: Function pointer *(kcs->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11794: Function pointer *(kcs->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12843: Function pointer *(smic->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12831: Function pointer *(smic->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12819: Function pointer *(smic->io->outputb) with type void (*)(struct si_sm_io *, unsigned int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 12783: Ignoring function call through function pointer *(smic->io->inputb): tmp = (*(smic->io->inputb))(smic->io, 2U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12795: Ignoring function call through function pointer *(smic->io->inputb): tmp = (*(smic->io->inputb))(smic->io, 1U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12807: Ignoring function call through function pointer *(smic->io->inputb): tmp = (*(smic->io->inputb))(smic->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12831: Ignoring function call through function pointer *(smic->io->outputb): (*(smic->io->outputb))(smic->io, 1U, (int)control); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12819: Ignoring function call through function pointer *(smic->io->outputb): (*(smic->io->outputb))(smic->io, 2U, (int)flags); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12843: Ignoring function call through function pointer *(smic->io->outputb): (*(smic->io->outputb))(smic->io, 0U, (int)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9304: Ignoring function call through function pointer *(new_smi->handlers->size): tmp = (*(new_smi->handlers->size))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9321: Ignoring function call through function pointer *(new_smi->handlers->init_data): new_smi->io_size = (*(new_smi->handlers->init_data))(new_smi->si_sm, &(new_smi->io)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14205: Ignoring function call through function pointer *(bt->io->inputb): status = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13879: Ignoring function call through function pointer *(bt->io->inputb): tmp = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13888: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13890: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13892: Ignoring function call through function pointer *(bt->io->inputb): (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13894: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13896: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13900: Ignoring function call through function pointer *(bt->io->inputb): tmp___0 = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13909: Ignoring function call through function pointer *(bt->io->inputb): tmp___2 = (*(bt->io->inputb))(bt->io, 1U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13930: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13918: Ignoring function call through function pointer *(bt->io->inputb): (*(bt->io->inputb))(bt->io, 1U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5824: Ignoring function call through function pointer *(smi_info->handlers->event): si_sm_result = (*(smi_info->handlers->event))(smi_info->si_sm, (long)time); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from smi_event_handler to bt_event (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6384: Ignoring function call through function pointer *(new_smi->irq_setup): (*(new_smi->irq_setup))(new_smi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14529: Ignoring function call through function pointer *(bt->io->inputb): tmp = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14533: Ignoring function call through function pointer *(bt->io->inputb): tmp___0 = (*(bt->io->inputb))(bt->io, 2U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13840: Ignoring function call through function pointer *(bt->io->inputb): tmp = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13849: Ignoring function call through function pointer *(bt->io->inputb): tmp___1 = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13853: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13858: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13860: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13862: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 2U, 128); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14421: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14423: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 1U, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14425: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 1U, 24); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14427: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 1U, 42); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14429: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 1U, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14431: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14375: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14380: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14004: Ignoring function call through function pointer *(bt->io->inputb): (bt->read_data)[0] = (*(bt->io->inputb))(bt->io, 1U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14384: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14359: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14348: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14350: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14309: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14314: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14293: Ignoring function call through function pointer *(bt->io->inputb): tmp___2 = (*(bt->io->inputb))(bt->io, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14297: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14263: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 64); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14254: Ignoring function call through function pointer *(bt->io->outputb): (*(bt->io->outputb))(bt->io, 0U, 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11758: Ignoring function call through function pointer *(kcs->io->inputb): tmp = (*(kcs->io->inputb))(kcs->io, 1U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6541: Ignoring function call through function pointer *(info->io.outputb): (*(info->io.outputb))(&(info->io), 2U, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11782: Ignoring function call through function pointer *(kcs->io->outputb): (*(kcs->io->outputb))(kcs->io, 1U, (int)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11794: Ignoring function call through function pointer *(kcs->io->outputb): (*(kcs->io->outputb))(kcs->io, 0U, (int)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9323: Ignoring function call through function pointer *(new_smi->io_setup): rv = (*(new_smi->io_setup))(new_smi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9338: Ignoring function call through function pointer *(new_smi->handlers->detect): tmp___1 = (*(new_smi->handlers->detect))(new_smi->si_sm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 8643-8644: Ignoring function call through function pointer *(smi_info->handlers->start_transaction): (*(smi_info->handlers->start_transaction))(smi_info->si_sm, (unsigned char *)(&msg), 2U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8583: Ignoring function call through function pointer *(smi_info->handlers->event): smi_result = (*(smi_info->handlers->event))(smi_info->si_sm, 0L); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9538: Ignoring function call through function pointer *(new_smi->irq_cleanup): (*(new_smi->irq_cleanup))(new_smi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6510: Ignoring function call through function pointer *(info->io.outputb): (*(info->io.outputb))(&(info->io), 2U, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9551: Ignoring function call through function pointer *(new_smi->handlers->cleanup): (*(new_smi->handlers->cleanup))(new_smi->si_sm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9565: Ignoring function call through function pointer *(new_smi->addr_source_cleanup): (*(new_smi->addr_source_cleanup))(new_smi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9574: Ignoring function call through function pointer *(new_smi->io_cleanup): (*(new_smi->io_cleanup))(new_smi); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            193 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            193 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       30 (16%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         8 (4%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      155 (80%)
  Times result was 'false':        105 (54%)
Number of strengthen sat checks:   27
  Times result was 'false':        23 (85%)
Number of coverage checks:         8645
  BDD entailment checks:           39
Number of SMT sat checks:          27
  trivial:                         0
  cached:                          1

Max ABE block size:                       591
Number of predicates discovered:          10
Number of abstraction locations:          5
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         221
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 1.43
Number of irrelevant predicates:          19 (9%)
Number of preds handled by boolean abs:   202 (91%)
  Total number of models for allsat:      53
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.34

Number of path formula cache hits:   9660 (23%)

Time for post operator:                 15.942s
  Time for path formula creation:       15.780s
    Actual computation:                 14.366s
Time for strengthen operator:          190.056s
  Time for satisfiability checks:      189.979s
Time for prec operator:                617.841s
  Time for abstraction:                617.783s (Max:    26.993s, Count: 193)
    Boolean abstraction:               526.394s
    Solving time:                      526.286s (Max:    26.685s)
    Model enumeration time:              0.555s
    Time for BDD construction:           0.007s (Max:     0.001s)
Time for merge operator:                15.559s
Time for coverage check:                 0.026s
  Time for BDD entailment checks:        0.019s
Total time for SMT solver (w/o itp):   716.821s

Number of BDD nodes:                               263
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         191 (count: 756, min: 0, max: 105, avg: 0.25)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.410s
Automaton transfers with branching:                0
Automaton transfer successors:                        61513 (count: 61513, min: 1, max: 1, avg: 1.00) [1 x 61513]

CPA algorithm statistics
------------------------
Number of iterations:            35622
Max size of waitlist:            87
Average size of waitlist:        42
Number of computed successors:   40339
Max successors for one state:    2
Number of times merged:          4303
Number of times stopped:         4337
Number of times breaked:         4

Total time for CPA algorithm:       842.023s (Max:   680.530s)
  Time for choose from waitlist:      0.081s
  Time for precision adjustment:    618.073s
  Time for transfer relation:       207.228s
  Time for merge operator:           15.774s
  Time for stop operator:             0.170s
  Time for adding to reached set:     0.188s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  31 (count: 4, min: 6, max: 9, avg: 7.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  34.425s
  Counterexample analysis:               34.218s (Max:    31.926s, Calls: 4)
    Refinement sat check:                33.561s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                  34.218s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.002s
  Precision update:                                    0.004s
  ARG update:                                          0.152s

Length of refined path (in blocks):                       9 (count: 3, min: 2, max: 4, avg: 3.00)
Number of affected states:                                6 (count: 3, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'true':                  0 (count: 3, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         6 (count: 3, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'false':                 3 (count: 3, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           2 (count: 3, min: 0, max: 1, avg: 0.67)
Equal non-trivial interpolants along paths:               1 (count: 3, min: 0, max: 1, avg: 0.33)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 18936
Max. size of reached set after ref.:  189
Avg. size of reached set before ref.: 6613.50
Avg. size of reached set after ref.:  142.00

Total time for CEGAR algorithm:     876.492s
Time for refinements:                34.469s
Average time for refinement:          8.617s
Max time for refinement:             32.040s

Code Coverage
-----------------------------
  Function coverage:      0.502
  Visited lines:          6529
  Total lines:            9088
  Line coverage:          0.718
  Visited conditions:     1013
  Total conditions:       2564
  Condition coverage:     0.395

CPAchecker general statistics
-----------------------------
Number of program locations:     5655
Number of CFA edges:             8685
Number of relevant variables:    1153
Number of functions:             235
Number of loops:                 39
Size of reached set:             10011
  Number of reached locations:   2255 (40%)
    Avg states per location:     4
    Max states per location:     72 (at node N184)
  Number of reached functions:   118 (50%)
  Number of partitions:          10009
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1835 (before line 7679), Function hardcode_find_bmc called from node N3060, stack depth 3 [5302b9f7], stack [main, init_ipmi_si, hardcode_find_bmc], Init])
  Number of target states:       0
  Size of final wait list        34

Time for analysis setup:          5.840s
  Time for loading CPAs:          0.696s
  Time for loading parser:        0.616s
  Time for CFA construction:      4.465s
    Time for parsing file(s):     1.139s
    Time for AST to CFA:          1.479s
    Time for CFA sanity check:    0.193s
    Time for post-processing:     1.453s
      Time for var class.:        0.000s
Time for Analysis:              876.492s
CPU time for analysis:          889.700s
Total time for CPAchecker:      882.337s
Total CPU time for CPAchecker:  900.600s

Time for Garbage Collector:       1.311s (in 11 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                577MB (   550 MiB) max;    311MB (   297 MiB) avg;    646MB (   616 MiB) peak
Used non-heap memory:             24MB (    23 MiB) max;     24MB (    23 MiB) avg;     25MB (    24 MiB) peak
Used in PS Old Gen pool:          63MB (    60 MiB) max;     30MB (    29 MiB) avg;     63MB (    60 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   1932MB (  1843 MiB) avg
Allocated non-heap memory:        27MB (    25 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  16647MB ( 15876 MiB) max;  15353MB ( 14642 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
