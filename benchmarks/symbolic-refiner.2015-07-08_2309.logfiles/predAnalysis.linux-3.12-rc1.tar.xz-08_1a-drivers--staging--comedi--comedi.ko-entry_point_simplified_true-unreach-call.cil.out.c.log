scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.12-rc1/ALL.prp ../svcomp15/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-08_1a-drivers--staging--comedi--comedi.ko-entry_point_simplified_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_54540815_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13162: Function pointer *(s->buf_change) with type int (*)(struct comedi_device *, struct comedi_subdevice *, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 14650-14651: Function pointer *(s->munge) with type void (*)(struct comedi_device *, struct comedi_subdevice *, void *, unsigned int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11293: Function pointer *(async->cb_func) with type int (*)(unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11038: Function pointer *(dev->open) with type int (*)(struct comedi_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14234: Function pointer *(ops->alloc) with type void * (*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14282: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8733: Function pointer *(s->do_cmdtest) with type int (*)(struct comedi_device *, struct comedi_subdevice *, struct comedi_cmd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9211: Function pointer *(s->do_cmdtest) with type int (*)(struct comedi_device *, struct comedi_subdevice *, struct comedi_cmd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7525: Function pointer *(s->async->inttrig) with type int (*)(struct comedi_device *, struct comedi_subdevice *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5268: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5812: Function pointer *(s->buf_change) with type int (*)(struct comedi_device *, struct comedi_subdevice *, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12037:	N4398 -{tmp___0 = ldv_zalloc(1UL);}-> N4399) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12041:	N4400 -{tmp___1 = ldv_zalloc(1UL);}-> N4401) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12049:	N4404 -{tmp___3 = ldv_zalloc(1UL);}-> N4405) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12053:	N4406 -{tmp___4 = ldv_zalloc(1UL);}-> N4407) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12057:	N4408 -{tmp___5 = ldv_zalloc(1UL);}-> N4409) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12081:	N4420 -{tmp___11 = ldv_zalloc(16UL);}-> N4421) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12085:	N4422 -{tmp___12 = ldv_zalloc(184UL);}-> N4423) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12101:	N4430 -{tmp___16 = ldv_zalloc(8UL);}-> N4431) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12105:	N4432 -{tmp___17 = ldv_zalloc(1UL);}-> N4433) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12117:	N4438 -{tmp___20 = ldv_zalloc(8UL);}-> N4439) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12121:	N4440 -{tmp___21 = ldv_zalloc(1UL);}-> N4441) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12125:	N4442 -{tmp___22 = ldv_zalloc(1UL);}-> N4443) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12133:	N4446 -{tmp___24 = ldv_zalloc(1UL);}-> N4447) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 12141:	N4450 -{tmp___26 = ldv_zalloc(1UL);}-> N4451) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 11874:	N4284 -{tmp = ldv_zalloc(1032UL);}-> N4285) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_zalloc::tmp produces garbage! (in the following line(s):
 line 11878:	N4286 -{tmp___0 = ldv_zalloc(360UL);}-> N4287) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

line 12948: Ignoring function call through function pointer *(dev->driver->detach): (*(dev->driver->detach))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14282: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14234: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            76 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            76 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       28 (37%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         12 (16%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      36 (47%)
  Times result was 'false':        9 (12%)
Number of strengthen sat checks:   3
  Times result was 'false':        0 (0%)
Number of coverage checks:         551
  BDD entailment checks:           41
Number of SMT sat checks:          3
  trivial:                         0
  cached:                          1

Max ABE block size:                       166
Number of predicates discovered:          8
Number of abstraction locations:          3
Max number of predicates per location:    6
Avg number of predicates per location:    4
Total predicates per abstraction:         87
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 2.42
Number of irrelevant predicates:          3 (3%)
Number of preds handled by boolean abs:   84 (97%)
  Total number of models for allsat:      29
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.81

Number of path formula cache hits:   1324 (38%)

Time for post operator:                  1.116s
  Time for path formula creation:        1.078s
    Actual computation:                  1.018s
Time for strengthen operator:            0.020s
  Time for satisfiability checks:        0.007s
Time for prec operator:                  4.445s
  Time for abstraction:                  4.432s (Max:     0.744s, Count: 76)
    Boolean abstraction:                 3.935s
    Solving time:                        3.893s (Max:     0.699s)
    Model enumeration time:              0.031s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.193s
Time for coverage check:                 0.015s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     3.931s

Number of BDD nodes:                               220
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 244, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.081s
Automaton transfers with branching:                0
Automaton transfer successors:                         7055 (count: 7055, min: 1, max: 1, avg: 1.00) [1 x 7055]

CPA algorithm statistics
------------------------
Number of iterations:            3006
Max size of waitlist:            28
Average size of waitlist:        14
Number of computed successors:   3336
Max successors for one state:    2
Number of times merged:          255
Number of times stopped:         294
Number of times breaked:         3

Total time for CPA algorithm:         6.378s (Max:     2.545s)
  Time for choose from waitlist:      0.051s
  Time for precision adjustment:      4.502s
  Time for transfer relation:         1.402s
  Time for merge operator:            0.210s
  Time for stop operator:             0.072s
  Time for adding to reached set:     0.045s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                  13 (count: 3, min: 4, max: 5, avg: 4.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.822s
  Counterexample analysis:                0.767s (Max:     0.294s, Calls: 3)
    Refinement sat check:                 0.673s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.767s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.002s
  Precision update:                                    0.002s
  ARG update:                                          0.015s

Length of refined path (in blocks):                       5 (count: 2, min: 2, max: 3, avg: 2.50)
Number of affected states:                                2 (count: 2, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  1 (count: 2, min: 0, max: 1, avg: 0.50)
Length (states) of path with itp non-trivial itp:         2 (count: 2, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 2 (count: 2, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 2, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 1255
Max. size of reached set after ref.:  346
Avg. size of reached set before ref.: 1096.67
Avg. size of reached set after ref.:  213.33

Total time for CEGAR algorithm:       7.230s
Time for refinements:                 0.849s
Average time for refinement:          0.283s
Max time for refinement:              0.346s

Code Coverage
-----------------------------
  Function coverage:      0.084
  Visited lines:          4278
  Total lines:            13319
  Line coverage:          0.321
  Visited conditions:     26
  Total conditions:       1724
  Condition coverage:     0.015

CPAchecker general statistics
-----------------------------
Number of program locations:     4538
Number of CFA edges:             6273
Number of relevant variables:    1495
Number of functions:             226
Number of loops:                 36
Size of reached set:             384
  Number of reached locations:   208 (5%)
    Avg states per location:     1
    Max states per location:     16 (at node N135)
  Number of reached functions:   19 (8%)
  Number of partitions:          384
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.544s
  Time for loading CPAs:          0.784s
  Time for loading parser:        0.530s
  Time for CFA construction:      5.163s
    Time for parsing file(s):     1.242s
    Time for AST to CFA:          2.358s
    Time for CFA sanity check:    0.167s
    Time for post-processing:     1.128s
      Time for var class.:        0.000s
Time for Analysis:                7.231s
CPU time for analysis:            9.020s
Total time for CPAchecker:       13.780s
Total CPU time for CPAchecker:   21.440s

Time for Garbage Collector:       0.000s (in 0 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                414MB (   395 MiB) max;    291MB (   277 MiB) avg;    414MB (   395 MiB) peak
Used non-heap memory:             23MB (    22 MiB) max;     18MB (    18 MiB) avg;     23MB (    22 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        25MB (    24 MiB) max;     25MB (    23 MiB) avg
Total process virtual memory:  13671MB ( 13038 MiB) max;  13605MB ( 12974 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
