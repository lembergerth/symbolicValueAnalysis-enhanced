scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.12-rc1/ALL.prp ../svcomp15/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--media--usb--stk1160--stk1160.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1848883338_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7060: Function pointer *(__sd->ops->video->s_routing) with type int (*)(struct v4l2_subdev *, u32 , u32 , u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7060: Ignoring function call through function pointer *(__sd->ops->video->s_routing): (*(__sd->ops->video->s_routing))(__sd, (u32 )route, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8877: Ignoring function call through function pointer *(__sd->ops->video->querystd): (*(__sd->ops->video->querystd))(__sd, norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9480: Ignoring function call through function pointer *(__sd->ops->core->s_std): (*(__sd->ops->core->s_std))(__sd, dev->norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from stk1160_video_register to stk1160_probe (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7540: Ignoring function call through function pointer *(__sd___0->ops->video->s_stream): (*(__sd___0->ops->video->s_stream))(__sd___0, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8580: Ignoring function call through function pointer *(__sd->ops->video->s_stream): (*(__sd->ops->video->s_stream))(__sd, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from stk1160_start_streaming to start_streaming (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12879: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12879: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ldv_usb_submit_urb_12 to ldv_submit_urb (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12888: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12888: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7513: Ignoring function call through function pointer *(__sd->ops->core->reset): (*(__sd->ops->core->reset))(__sd, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8990: Ignoring function call through function pointer *(__sd->ops->core->s_std): (*(__sd->ops->core->s_std))(__sd, dev->norm); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___0 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___10 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___11 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___12 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___13 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___14 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___16 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___17 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___18 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___2 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___20 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___21 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___22 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___23 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___25 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___27 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___28 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___3 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___5 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

Destroying the void * pointer  ldv_main_exported_5::tmp___8 produces garbage! (in the following line(s):
 line 7918:	N678 -{ldv_main_exported_5();}-> N680) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerRemoval, WARNING)

line 8656: Ignoring function call through function pointer *(__sd->ops->video->s_stream): (*(__sd->ops->video->s_stream))(__sd, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            11426 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            11426 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1418 (12%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         6838 (60%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3170 (28%)
  Times result was 'false':        176 (2%)
Number of strengthen sat checks:   6
  Times result was 'false':        5 (83%)
Number of coverage checks:         46821
  BDD entailment checks:           7429
Number of SMT sat checks:          6
  trivial:                         0
  cached:                          0

Max ABE block size:                       349
Number of predicates discovered:          7
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         22190
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 7.00
Number of irrelevant predicates:          1250 (6%)
Number of preds handled by boolean abs:   20940 (94%)
  Total number of models for allsat:      3835
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.21

Number of path formula cache hits:   54910 (21%)

Time for post operator:                 43.062s
  Time for path formula creation:       42.456s
    Actual computation:                 37.220s
Time for strengthen operator:            0.441s
  Time for satisfiability checks:        0.091s
Time for prec operator:                814.377s
  Time for abstraction:                813.581s (Max:    10.336s, Count: 11426)
    Boolean abstraction:               709.348s
    Solving time:                      652.737s (Max:    10.020s)
    Model enumeration time:             55.718s
    Time for BDD construction:           0.266s (Max:     0.002s)
Time for merge operator:                 6.723s
Time for coverage check:                 0.133s
  Time for BDD entailment checks:        0.084s
Total time for SMT solver (w/o itp):   708.546s

Number of BDD nodes:                               241
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                        2598 (count: 21573, min: 0, max: 912, avg: 0.12)
Time for BDD node cleanup:                             0.030s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.736s
  Time for transition matches:                         0.746s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       387169 (count: 387169, min: 1, max: 1, avg: 1.00) [1 x 387169]

CPA algorithm statistics
------------------------
Number of iterations:            232684
Max size of waitlist:            214
Average size of waitlist:        115
Number of computed successors:   259374
Max successors for one state:    2
Number of times merged:          19696
Number of times stopped:         26339
Number of times breaked:         1

Total time for CPA algorithm:       873.630s (Max:   859.107s)
  Time for choose from waitlist:      0.318s
  Time for precision adjustment:    815.178s
  Time for transfer relation:        47.691s
  Time for merge operator:            7.213s
  Time for stop operator:             0.652s
  Time for adding to reached set:     0.896s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.294s
  Counterexample analysis:                0.066s (Max:     0.066s, Calls: 1)
    Refinement sat check:                 0.058s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.066s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 28890
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 28890.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     873.989s
Time for refinements:                 0.359s
Average time for refinement:          0.359s
Max time for refinement:              0.359s

Code Coverage
-----------------------------
  Function coverage:      0.893
  Visited lines:          8942
  Total lines:            9199
  Line coverage:          0.972
  Visited conditions:     658
  Total conditions:       736
  Condition coverage:     0.894

CPAchecker general statistics
-----------------------------
Number of program locations:     2171
Number of CFA edges:             2963
Number of relevant variables:    668
Number of functions:             131
Number of loops:                 26
Size of reached set:             203971
  Number of reached locations:   1947 (90%)
    Avg states per location:     104
    Max states per location:     1728 (at node N10)
  Number of reached functions:   117 (89%)
  Number of partitions:          203921
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1172 (before line 8887), Function vidioc_querystd called from node N1958, stack depth 3 [7fd15ec6], stack [main, ldv_main_exported_5, vidioc_querystd], Init])
  Number of target states:       0
  Size of final wait list        165

Time for analysis setup:          4.395s
  Time for loading CPAs:          0.542s
  Time for loading parser:        0.555s
  Time for CFA construction:      3.232s
    Time for parsing file(s):     1.251s
    Time for AST to CFA:          1.046s
    Time for CFA sanity check:    0.110s
    Time for post-processing:     0.655s
      Time for var class.:        0.000s
Time for Analysis:              873.989s
CPU time for analysis:          892.470s
Total time for CPAchecker:      878.389s
Total CPU time for CPAchecker:  900.250s

Time for Garbage Collector:       1.303s (in 6 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               2205MB (  2102 MiB) max;    969MB (   924 MiB) avg;   2317MB (  2210 MiB) peak
Used non-heap memory:             25MB (    24 MiB) max;     25MB (    24 MiB) avg;     26MB (    24 MiB) peak
Used in PS Old Gen pool:          98MB (    94 MiB) max;     31MB (    30 MiB) avg;     98MB (    94 MiB) peak
Allocated heap memory:          3611MB (  3444 MiB) max;   3299MB (  3147 MiB) avg
Allocated non-heap memory:        27MB (    26 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:  13932MB ( 13287 MiB) max;  13848MB ( 13206 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
