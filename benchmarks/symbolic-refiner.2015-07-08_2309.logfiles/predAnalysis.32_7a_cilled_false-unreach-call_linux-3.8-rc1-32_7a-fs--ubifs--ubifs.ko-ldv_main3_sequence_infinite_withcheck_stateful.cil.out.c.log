scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-consumption/ALL.prp ../svcomp15/ldv-consumption/32_7a_cilled_false-unreach-call_linux-3.8-rc1-32_7a-fs--ubifs--ubifs.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_2084837443_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 57499: Function pointer *(tmp->cot_compress) with type int (*)(struct crypto_tfm *, u8 *, unsigned int, u8 *, unsigned int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 57518: Function pointer *(tmp->cot_decompress) with type int (*)(struct crypto_tfm *, u8 *, unsigned int, u8 *, unsigned int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 15042-15043: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14927: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14894: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 14894: Ignoring call via function pointer ubifs_readdir::filldir for which no suitable target was found in line: over = (*filldir)(dirent, ".", 1, 0LL, __CPAchecker_TMP_2, 4U); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14894: Ignoring function call through function pointer *filldir: over = (*filldir)(dirent, ".", 1, 0LL, __CPAchecker_TMP_2, 4U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14927: Ignoring call via function pointer ubifs_readdir::filldir for which no suitable target was found in line: over = (*filldir)(dirent, "..", 2, 1LL, (u64 )tmp___5, 4U); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 14927: Ignoring function call through function pointer *filldir: over = (*filldir)(dirent, "..", 2, 1LL, (u64 )tmp___5, 4U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            491 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            491 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (0%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         47 (10%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      443 (90%)
  Times result was 'false':        250 (51%)
Number of strengthen sat checks:   16
  Times result was 'false':        15 (94%)
Number of coverage checks:         19158
  BDD entailment checks:           126
Number of SMT sat checks:          16
  trivial:                         0
  cached:                          0

Max ABE block size:                       681
Number of predicates discovered:          28
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         12404
Max number of predicates per abstraction: 28
Avg number of predicates per abstraction: 28.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   12404 (100%)
  Total number of models for allsat:      207
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.47

Number of path formula cache hits:   23 (0%)

Time for post operator:                 24.073s
  Time for path formula creation:       23.838s
    Actual computation:                 22.096s
Time for strengthen operator:            0.127s
  Time for satisfiability checks:        0.012s
Time for prec operator:                777.751s
  Time for abstraction:                777.679s (Max:    26.338s, Count: 491)
    Boolean abstraction:               689.376s
    Solving time:                      685.959s (Max:    25.790s)
    Model enumeration time:              3.096s
    Time for BDD construction:           0.079s (Max:     0.011s)
Time for merge operator:                16.318s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):   689.068s

Number of BDD nodes:                               753
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         478 (count: 2036, min: 0, max: 289, avg: 0.23)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.508s
  Time for transition matches:                         0.226s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       106079 (count: 106079, min: 1, max: 1, avg: 1.00) [1 x 106079]

CPA algorithm statistics
------------------------
Number of iterations:            65644
Max size of waitlist:            425
Average size of waitlist:        155
Number of computed successors:   75947
Max successors for one state:    2
Number of times merged:          9516
Number of times stopped:         9642
Number of times breaked:         1

Total time for CPA algorithm:       837.844s (Max:   837.634s)
  Time for choose from waitlist:      0.133s
  Time for precision adjustment:    778.035s
  Time for transfer relation:        41.705s
  Time for merge operator:           16.874s
  Time for stop operator:             0.228s
  Time for adding to reached set:     0.275s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.142s
  Counterexample analysis:                0.069s (Max:     0.069s, Calls: 1)
    Refinement sat check:                 0.062s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.001s
  Building the counterexample trace:                   0.069s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 21
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 21.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     837.993s
Time for refinements:                 0.148s
Average time for refinement:          0.148s
Max time for refinement:              0.148s

Code Coverage
-----------------------------
  Function coverage:      0.038
  Visited lines:          5723
  Total lines:            42710
  Line coverage:          0.134
  Visited conditions:     424
  Total conditions:       9964
  Condition coverage:     0.043

CPAchecker general statistics
-----------------------------
Number of program locations:     29766
Number of CFA edges:             45701
Number of relevant variables:    10323
Number of functions:             1275
Number of loops:                 339
Size of reached set:             66035
  Number of reached locations:   1189 (4%)
    Avg states per location:     55
    Max states per location:     940 (at node N749)
  Number of reached functions:   48 (4%)
  Number of partitions:          66035
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        409

Time for analysis setup:         25.832s
  Time for loading CPAs:          0.887s
  Time for loading parser:        0.725s
  Time for CFA construction:     24.148s
    Time for parsing file(s):     3.272s
    Time for AST to CFA:         11.077s
    Time for CFA sanity check:    2.308s
    Time for post-processing:     7.293s
      Time for var class.:        0.000s
Time for Analysis:              837.994s
CPU time for analysis:          849.870s
Total time for CPAchecker:      863.830s
Total CPU time for CPAchecker:  900.030s

Time for Garbage Collector:       2.241s (in 17 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                662MB (   631 MiB) max;    389MB (   371 MiB) avg;    807MB (   770 MiB) peak
Used non-heap memory:             28MB (    26 MiB) max;     27MB (    25 MiB) avg;     28MB (    27 MiB) peak
Used in PS Old Gen pool:         185MB (   176 MiB) max;    112MB (   106 MiB) avg;    185MB (   176 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   1942MB (  1852 MiB) avg
Allocated non-heap memory:        29MB (    28 MiB) max;     29MB (    27 MiB) avg
Total process virtual memory:  14772MB ( 14087 MiB) max;  14249MB ( 13589 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
