scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.7.3/ALL.prp ../svcomp15/ldv-linux-3.7.3/main1_false-unreach-call_drivers-vhost-vhost_net-ko--32_7a--linux-3.7.3.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_123729307_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 14270-14271: Function pointer *(sock->ops->getname) with type int (*)(struct socket *, struct sockaddr *, int *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13728: Function pointer *(sock->ops->recvmsg) with type int (*)(struct kiocb *, struct socket *, struct msghdr *, size_t , int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13262: Function pointer *(sock->ops->sendmsg) with type int (*)(struct kiocb *, struct socket *, struct msghdr *, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            2 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (50%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1 (50%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   3
  Times result was 'false':        1 (33%)
Number of coverage checks:         10
  BDD entailment checks:           0
Number of SMT sat checks:          3
  trivial:                         0
  cached:                          0

Max ABE block size:                       10
Number of predicates discovered:          8
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         8
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 8.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   8 (100%)
  Total number of models for allsat:      1
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Number of path formula cache hits:   78 (5%)

Time for post operator:                  0.178s
  Time for path formula creation:        0.174s
    Actual computation:                  0.237s
Time for strengthen operator:            0.052s
  Time for satisfiability checks:        0.050s
Time for prec operator:                  0.038s
  Time for abstraction:                  0.035s (Max:     0.033s, Count: 2)
    Boolean abstraction:                 0.026s
    Solving time:                        0.012s (Max:     0.012s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.010s (Max:     0.010s)
Time for merge operator:                 0.004s
Time for coverage check:                 0.000s
Total time for SMT solver (w/o itp):     0.062s

Number of BDD nodes:                               230
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 31, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.061s
Automaton transfers with branching:                0
Automaton transfer successors:                         2711 (count: 2711, min: 1, max: 1, avg: 1.00) [1 x 2711]

CPA algorithm statistics
------------------------
Number of iterations:            172
Max size of waitlist:            19
Average size of waitlist:        7
Number of computed successors:   206
Max successors for one state:    2
Number of times merged:          5
Number of times stopped:         5
Number of times breaked:         2

Total time for CPA algorithm:         0.391s (Max:     0.235s)
  Time for choose from waitlist:      0.003s
  Time for precision adjustment:      0.045s
  Time for transfer relation:         0.326s
  Time for merge operator:            0.005s
  Time for stop operator:             0.003s
  Time for adding to reached set:     0.006s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   4 (count: 2, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.904s
  Counterexample analysis:                0.159s (Max:     0.135s, Calls: 2)
    Refinement sat check:                 0.102s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.722s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.159s
  Extracting precise counterexample:                   0.722s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 130
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 101.50
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:       1.304s
Time for refinements:                 0.913s
Average time for refinement:          0.456s
Max time for refinement:              0.863s

Code Coverage
-----------------------------
  Function coverage:      0.065
  Visited lines:          5752
  Total lines:            9923
  Line coverage:          0.580
  Visited conditions:     42
  Total conditions:       1046
  Condition coverage:     0.040

CPAchecker general statistics
-----------------------------
Number of program locations:     3406
Number of CFA edges:             4791
Number of relevant variables:    1153
Number of functions:             230
Number of loops:                 27
Size of reached set:             130
  Number of reached locations:   123 (4%)
    Avg states per location:     1
    Max states per location:     2 (at node N5328)
  Number of reached functions:   15 (7%)
  Number of partitions:          130
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       1
  Size of final wait list        19

Time for analysis setup:          6.416s
  Time for loading CPAs:          0.667s
  Time for loading parser:        0.545s
  Time for CFA construction:      5.137s
    Time for parsing file(s):     1.290s
    Time for AST to CFA:          2.429s
    Time for CFA sanity check:    0.177s
    Time for post-processing:     0.872s
      Time for var class.:        0.000s
Time for Analysis:                1.305s
CPU time for analysis:            2.000s
Total time for CPAchecker:        7.726s
Total CPU time for CPAchecker:   14.090s

Time for Garbage Collector:       0.000s (in 0 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                338MB (   322 MiB) max;    190MB (   181 MiB) avg;    338MB (   322 MiB) peak
Used non-heap memory:             22MB (    21 MiB) max;     15MB (    15 MiB) avg;     23MB (    22 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2024MB (  1930 MiB) max;   2024MB (  1930 MiB) avg
Allocated non-heap memory:        25MB (    24 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:  13597MB ( 12967 MiB) max;  13583MB ( 12954 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 15516) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
