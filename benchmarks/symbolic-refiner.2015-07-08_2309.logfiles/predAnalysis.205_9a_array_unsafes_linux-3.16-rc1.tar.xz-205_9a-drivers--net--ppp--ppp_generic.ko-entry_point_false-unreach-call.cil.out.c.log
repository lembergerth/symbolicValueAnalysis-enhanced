scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ppp--ppp_generic.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_1155618110_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 11053-11054: Function pointer *(ppp->xcomp->compress) with type int (*)(void *, unsigned char *, unsigned char *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8870: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 13457-13458: Function pointer *(ppp->xcomp->comp_init) with type int (*)(void *, unsigned char *, int, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 13437-13438: Function pointer *(ppp->rcomp->decomp_init) with type int (*)(void *, unsigned char *, int, int, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12430: Function pointer *(ppp->rcomp->incomp) with type void (*)(void *, unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12398-12399: Function pointer *(ppp->rcomp->decompress) with type int (*)(void *, unsigned char *, int, unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9891: Function pointer *(chan->ops->ioctl) with type int (*)(struct ppp_channel *, unsigned int, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13316: Function pointer *(cp->decomp_alloc) with type void * (*)(unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13282: Function pointer *(cp->comp_alloc) with type void * (*)(unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 7767: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7804: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 13316: Ignoring function call through function pointer *(cp->decomp_alloc): state = (*(cp->decomp_alloc))((unsigned char *)(&ccp_option), (int)(data.length)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13336: Ignoring function call through function pointer *(ocomp->decomp_free): (*(ocomp->decomp_free))(ostate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11819: Ignoring function call through function pointer *(pch->chan->ops->start_xmit): tmp = (*(pch->chan->ops->start_xmit))(pch->chan, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13542: Ignoring function call through function pointer *(xcomp->comp_free): (*(xcomp->comp_free))(xstate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_ccp_closed to ppp_output_wakeup (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_disconnect_channel to ppp_destroy_interface (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13551: Ignoring function call through function pointer *(rcomp->decomp_free): (*(rcomp->decomp_free))(rstate); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11747: Ignoring function call through function pointer *(chan->ops->start_xmit): tmp___1 = (*(chan->ops->start_xmit))(chan, frag); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11747: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type int: tmp___1 = ppp_start_xmit(chan, frag); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_mp_explode to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8870: Ignoring function call through function pointer *(p->_qproc): (*(p->_qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11343: Ignoring function call through function pointer *(pch->chan->ops->start_xmit): tmp___0 = (*(pch->chan->ops->start_xmit))(pch->chan, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11343: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type int: tmp___0 = ppp_start_xmit(pch->chan, skb); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_push to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 11120: Ignoring function call through function pointer *(ppp->pass_filter->bpf_func): tmp___1 = (*(ppp->pass_filter->bpf_func))((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->pass_filter->ldv_41788.insnsi))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11120: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type unsigned int: tmp___1 = ppp_start_xmit((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->pass_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from ppp_send_frame to ppp_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 11146-11147: Ignoring function call through function pointer *(ppp->active_filter->bpf_func): tmp___2 = (*(ppp->active_filter->bpf_func))((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->active_filter->ldv_41788.insnsi))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11146-11147: Return type of function ppp_start_xmit is netdev_tx_t , but result is used as type unsigned int: tmp___2 = ppp_start_xmit((const struct sk_buff *)skb, (const struct sock_filter_int *)(&(ppp->active_filter->ldv_41788.insnsi))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 13492: Ignoring function call through function pointer *(ppp->xcomp->comp_reset): (*(ppp->xcomp->comp_reset))(ppp->xc_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from ppp_ccp_peek to ppp_output_wakeup (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from ppp_ccp_closed to ppp_unregister_channel (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13482: Ignoring function call through function pointer *(ppp->rcomp->decomp_reset): (*(ppp->rcomp->decomp_reset))(ppp->rc_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 13457-13458: Ignoring function call through function pointer *(ppp->xcomp->comp_init): tmp___2 = (*(ppp->xcomp->comp_init))(ppp->xc_state, dp, len, ppp->file.index, 0, ppp->debug); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 13437-13438: Ignoring function call through function pointer *(ppp->rcomp->decomp_init): tmp___1 = (*(ppp->rcomp->decomp_init))(ppp->rc_state, dp, len, ppp->file.index, 0, ppp->mru, ppp->debug); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11053-11054: Ignoring function call through function pointer *(ppp->xcomp->compress): len = (*(ppp->xcomp->compress))(ppp->xc_state, (skb->data) + 18446744073709551614UL, new_skb->data, (int)((skb->len) + 2U), compressor_skb_size); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            129952 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            129952 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       129952 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         696437
  BDD entailment checks:           68065
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       452
Number of predicates discovered:          0

Number of path formula cache hits:   1138942 (25%)

Time for post operator:                433.086s
  Time for path formula creation:      423.271s
    Actual computation:                344.671s
Time for strengthen operator:            5.288s
Time for prec operator:                 50.725s
  Time for abstraction:                 43.195s (Max:    23.192s, Count: 129952)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:               163.855s
Time for coverage check:                 0.802s
  Time for BDD entailment checks:        0.244s
Total time for SMT solver (w/o itp):     0.000s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 198018, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.163s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 24.030s
  Time for transition matches:                         9.649s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      6116138 (count: 6116138, min: 1, max: 1, avg: 1.00) [1 x 6116138]

CPA algorithm statistics
------------------------
Number of iterations:            3856142
Max size of waitlist:            126417
Average size of waitlist:        77358
Number of computed successors:   4364792
Max successors for one state:    2
Number of times merged:          314186
Number of times stopped:         382251
Number of times breaked:         0

Total time for CPA algorithm:       770.130s (Max:   770.130s)
  Time for choose from waitlist:      3.545s
  Time for precision adjustment:     60.381s
  Time for transfer relation:       498.262s
  Time for merge operator:          167.411s
  Time for stop operator:             7.349s
  Time for adding to reached set:    11.914s

Predicate-Abstraction Refiner statistics
----------------------------------------
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.502
  Visited lines:          8848
  Total lines:            10717
  Line coverage:          0.826
  Visited conditions:     646
  Total conditions:       1162
  Condition coverage:     0.556

CPAchecker general statistics
-----------------------------
Number of program locations:     3423
Number of CFA edges:             4845
Number of relevant variables:    999
Number of functions:             229
Number of loops:                 24
Size of reached set:             3982541
  Size of final wait list        126399

Time for analysis setup:          6.115s
  Time for loading CPAs:          0.592s
  Time for loading parser:        0.560s
  Time for CFA construction:      4.897s
    Time for parsing file(s):     1.472s
    Time for AST to CFA:          2.183s
    Time for CFA sanity check:    0.137s
    Time for post-processing:     0.839s
      Time for var class.:        0.000s
Time for Analysis:              770.130s
CPU time for analysis:          888.480s
Total time for CPAchecker:      776.250s
Total CPU time for CPAchecker:  899.990s

Time for Garbage Collector:     109.099s (in 46 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               5612MB (  5352 MiB) max;   3016MB (  2876 MiB) avg;   6712MB (  6401 MiB) peak
Used non-heap memory:             25MB (    24 MiB) max;     23MB (    22 MiB) avg;     25MB (    24 MiB) peak
Used in PS Old Gen pool:        3026MB (  2886 MiB) max;   1520MB (  1450 MiB) avg;   3090MB (  2947 MiB) peak
Allocated heap memory:          6798MB (  6483 MiB) max;   5223MB (  4981 MiB) avg
Allocated non-heap memory:        48MB (    45 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:  13685MB ( 13051 MiB) max;  13613MB ( 12983 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
