scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--block--paride--pg.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_522801406_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 4109: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4072: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1113 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1113 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       564 (51%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         323 (29%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      226 (20%)
  Times result was 'false':        71 (6%)
Number of strengthen sat checks:   22
  Times result was 'false':        21 (95%)
Number of coverage checks:         6394
  BDD entailment checks:           638
Number of SMT sat checks:          22
  trivial:                         0
  cached:                          14

Max ABE block size:                       111
Number of predicates discovered:          3
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         226
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.00
Number of irrelevant predicates:          0 (0%)
Number of preds handled by boolean abs:   226 (100%)
  Total number of models for allsat:      167
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.74

Number of path formula cache hits:   14663 (43%)

Time for post operator:                  9.097s
  Time for path formula creation:        8.882s
    Actual computation:                  8.497s
Time for strengthen operator:            0.488s
  Time for satisfiability checks:        0.430s
Time for prec operator:                 80.650s
  Time for abstraction:                 80.555s (Max:     3.539s, Count: 1113)
    Boolean abstraction:                69.627s
    Solving time:                       69.088s (Max:     3.501s)
    Model enumeration time:              0.507s
    Time for BDD construction:           0.009s (Max:     0.001s)
Time for merge operator:                 2.116s
Time for coverage check:                 0.020s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):    70.024s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                           0 (count: 2112, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.312s
Automaton transfers with branching:                0
Automaton transfer successors:                        46513 (count: 46513, min: 1, max: 1, avg: 1.00) [1 x 46513]

CPA algorithm statistics
------------------------
Number of iterations:            29222
Max size of waitlist:            169
Average size of waitlist:        57
Number of computed successors:   32887
Max successors for one state:    2
Number of times merged:          2878
Number of times stopped:         3516
Number of times breaked:         1

Total time for CPA algorithm:        94.500s (Max:    81.947s)
  Time for choose from waitlist:      0.096s
  Time for precision adjustment:     80.843s
  Time for transfer relation:        10.534s
  Time for merge operator:            2.265s
  Time for stop operator:             0.168s
  Time for adding to reached set:     0.197s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   9 (count: 1, min: 9, max: 9, avg: 9.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.956s
  Counterexample analysis:                0.740s (Max:     0.740s, Calls: 1)
    Refinement sat check:                 0.636s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.001s
  Building the counterexample trace:                   0.740s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 15032
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 15032.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:      95.500s
Time for refinements:                 1.000s
Average time for refinement:          1.000s
Max time for refinement:              1.000s

Code Coverage
-----------------------------
  Function coverage:      0.784
  Visited lines:          4011
  Total lines:            4055
  Line coverage:          0.989
  Visited conditions:     238
  Total conditions:       250
  Condition coverage:     0.952

CPAchecker general statistics
-----------------------------
Number of program locations:     763
Number of CFA edges:             1012
Number of relevant variables:    257
Number of functions:             51
Number of loops:                 15
Size of reached set:             14270
  Number of reached locations:   692 (91%)
    Avg states per location:     20
    Max states per location:     328 (at node N191)
  Number of reached functions:   40 (78%)
  Number of partitions:          14270
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.056s
  Time for loading CPAs:          0.495s
  Time for loading parser:        0.561s
  Time for CFA construction:      1.935s
    Time for parsing file(s):     0.678s
    Time for AST to CFA:          0.719s
    Time for CFA sanity check:    0.090s
    Time for post-processing:     0.298s
      Time for var class.:        0.000s
Time for Analysis:               95.501s
CPU time for analysis:          106.690s
Total time for CPAchecker:       98.562s
Total CPU time for CPAchecker:  112.080s

Time for Garbage Collector:       0.207s (in 2 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                751MB (   717 MiB) max;    526MB (   501 MiB) avg;    757MB (   722 MiB) peak
Used non-heap memory:             24MB (    22 MiB) max;     23MB (    22 MiB) avg;     24MB (    23 MiB) peak
Used in PS Old Gen pool:           0MB (     0 MiB) max;      0MB (     0 MiB) avg;      0MB (     0 MiB) peak
Allocated heap memory:          2553MB (  2435 MiB) max;   2493MB (  2377 MiB) avg
Allocated non-heap memory:        26MB (    25 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:  13731MB ( 13095 MiB) max;  13651MB ( 13018 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
