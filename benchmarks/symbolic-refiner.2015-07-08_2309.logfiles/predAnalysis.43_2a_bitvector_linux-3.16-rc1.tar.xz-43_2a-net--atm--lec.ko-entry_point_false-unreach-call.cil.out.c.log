scripts/cpa.sh -heap 10000M -noout -setprop log.consoleLevel=WARNING -skipRecursion -predicateAnalysis-bitprecise -setprop cpa.value.symbolic.handlePointers=false -64 -timelimit 900s -stats -spec ../svcomp15/ldv-linux-3.16-rc1/ALL.prp ../svcomp15/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-net--atm--lec.ko-entry_point_false-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 10000M.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/vcloud-vcloud-master/worker/tmp_-858518199_tempdir
Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 11547: Function pointer *(priv->lane2_ops->associate_indicator) with type void (*)(struct net_device *, u8 *, u8 *, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker
 cpa.value.symbolic.handlePointers 
 (CPAchecker.printConfigurationWarnings, WARNING)

line 8875: Ignoring function call through function pointer *(sk->sk_data_ready): (*(sk->sk_data_ready))(sk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9960: Ignoring function call through function pointer *(sk->sk_data_ready): (*(sk->sk_data_ready))(sk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from send_to_lecd to lec_arp_check_expire (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_arp_expire_arp to send_to_lecd (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9990: Ignoring function call through function pointer *(sk->sk_data_ready): (*(sk->sk_data_ready))(sk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8920: Ignoring function call through function pointer *(vcc->send): tmp___0 = (*(vcc->send))(vcc, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8920: Return type of function lec_start_xmit is netdev_tx_t , but result is used as type int: tmp___0 = lec_start_xmit(vcc, skb); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from lec_send to lec_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9636: Ignoring call via function pointer br_fdb_test_addr_hook for which no suitable target was found in line: tmp___8 = (*br_fdb_test_addr_hook)(dev, (unsigned char *)(&(mesg->content.proxy.mac_addr))); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9636: Ignoring function call through function pointer *br_fdb_test_addr_hook: tmp___8 = (*br_fdb_test_addr_hook)(dev, (unsigned char *)(&(mesg->content.proxy.mac_addr))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9636: Return type of function lec_start_xmit is netdev_tx_t , but result is used as type int: tmp___8 = lec_start_xmit(dev, (unsigned char *)(&(mesg->content.proxy.mac_addr))); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Skipping recursive function call from lec_atm_send to lec_start_xmit (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_atm_send to lec_atm_send (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9681: Ignoring function call through function pointer *(sk->sk_data_ready): (*(sk->sk_data_ready))(sk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from lec_atm_send to lec_arp_check_expire (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from send_to_lecd to lec_arp_expire_arp (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 11547: Ignoring function call through function pointer *(priv->lane2_ops->associate_indicator): (*(priv->lane2_ops->associate_indicator))(dev, mac_addr___0, tlvs, sizeoftlvs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Skipping recursive function call from lec_flush_complete to lec_send (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from __lec_arp_check_expire to send_to_lecd (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_atm_send to lec_arp_expire_arp (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_arp_update to send_to_lecd (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_arp_check_expire to lec_send (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_handle_bridge to lec_arp_check_expire (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_handle_bridge to lec_arp_expire_arp (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_arp_resolve to send_to_lecd (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

Skipping recursive function call from lec_start_xmit to lec_send (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7829: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis stopped (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            43180 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            43180 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       40811 (95%)
  Times precision was {false}:     11 (0%)
  Times result was cached:         1017 (2%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1341 (3%)
  Times result was 'false':        209 (0%)
Number of strengthen sat checks:   2277
  Times result was 'false':        2276 (100%)
Number of coverage checks:         502320
  BDD entailment checks:           25818
Number of SMT sat checks:          2277
  trivial:                         0
  cached:                          1840

Max ABE block size:                       350
Number of predicates discovered:          3
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0
Total predicates per abstraction:         1352
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.00
Number of irrelevant predicates:          11 (1%)
Number of preds handled by boolean abs:   1341 (99%)
  Total number of models for allsat:      1200
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.89

Number of path formula cache hits:   1322814 (57%)

Time for post operator:                231.956s
  Time for path formula creation:      227.982s
    Actual computation:                195.913s
Time for strengthen operator:            5.399s
  Time for satisfiability checks:        2.766s
Time for prec operator:                493.148s
  Time for abstraction:                490.204s (Max:    45.971s, Count: 43180)
    Boolean abstraction:               421.462s
    Solving time:                      417.432s (Max:    45.405s)
    Model enumeration time:              4.544s
    Time for BDD construction:           0.089s (Max:     0.001s)
Time for merge operator:                41.145s
Time for coverage check:                 0.509s
  Time for BDD entailment checks:        0.129s
Total time for SMT solver (w/o itp):   424.728s

Number of BDD nodes:                               202
Size of BDD node table:                            466043
Size of BDD cache:                                 46619
Size of BDD node cleanup queue:                         387 (count: 72030, min: 0, max: 387, avg: 0.01)
Time for BDD node cleanup:                             0.050s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 12.720s
  Time for transition matches:                         5.258s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                      3308583 (count: 3308583, min: 1, max: 1, avg: 1.00) [1 x 3308583]

CPA algorithm statistics
------------------------
Number of iterations:            1887666
Max size of waitlist:            1165
Average size of waitlist:        362
Number of computed successors:   2152615
Max successors for one state:    2
Number of times merged:          238251
Number of times stopped:         264026
Number of times breaked:         1

Total time for CPA algorithm:       832.053s (Max:   488.654s)
  Time for choose from waitlist:      2.106s
  Time for precision adjustment:    498.254s
  Time for transfer relation:       267.821s
  Time for merge operator:           44.282s
  Time for stop operator:             3.812s
  Time for adding to reached set:     5.299s

Predicate-Abstraction Refiner statistics
----------------------------------------
Avg. length of target path (in blocks):                   2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.138s
  Counterexample analysis:                0.123s (Max:     0.123s, Calls: 1)
    Refinement sat check:                 0.105s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.123s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Predicate creation:                                  0.000s
  Precision update:                                    0.000s
  ARG update:                                          0.000s

Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 1749893
Max. size of reached set after ref.:  1
Avg. size of reached set before ref.: 1749893.00
Avg. size of reached set after ref.:  1.00

Total time for CEGAR algorithm:     836.728s
Time for refinements:                 4.675s
Average time for refinement:          4.675s
Max time for refinement:              4.675s

Code Coverage
-----------------------------
  Function coverage:      0.554
  Visited lines:          9222
  Total lines:            11040
  Line coverage:          0.835
  Visited conditions:     573
  Total conditions:       1022
  Condition coverage:     0.561

CPAchecker general statistics
-----------------------------
Number of program locations:     3044
Number of CFA edges:             4317
Number of relevant variables:    1006
Number of functions:             175
Number of loops:                 39
Size of reached set:             138488
  Number of reached locations:   1675 (55%)
    Avg states per location:     82
    Max states per location:     1904 (at node N193)
  Number of reached functions:   97 (55%)
  Number of partitions:          138477
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2926 (before line 12588), Function lec_arp_check_expire called from node N5159, stack depth 4 [5c56a46b], stack [main, lec_start_xmit, lec_handle_bridge, lec_arp_check_expire], Init])
  Number of target states:       0
  Size of final wait list        196

Time for analysis setup:          6.463s
  Time for loading CPAs:          0.620s
  Time for loading parser:        0.570s
  Time for CFA construction:      5.208s
    Time for parsing file(s):     1.552s
    Time for AST to CFA:          2.203s
    Time for CFA sanity check:    0.289s
    Time for post-processing:     0.923s
      Time for var class.:        0.000s
Time for Analysis:              836.728s
CPU time for analysis:          888.340s
Total time for CPAchecker:      843.196s
Total CPU time for CPAchecker:  900.580s

Time for Garbage Collector:      34.834s (in 23 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:               4540MB (  4330 MiB) max;   2660MB (  2536 MiB) avg;   4748MB (  4528 MiB) peak
Used non-heap memory:             26MB (    25 MiB) max;     24MB (    23 MiB) avg;     27MB (    25 MiB) peak
Used in PS Old Gen pool:        1410MB (  1345 MiB) max;   1077MB (  1027 MiB) avg;   1410MB (  1345 MiB) peak
Allocated heap memory:          5799MB (  5530 MiB) max;   5221MB (  4980 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:  14077MB ( 13425 MiB) max;  13845MB ( 13204 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
